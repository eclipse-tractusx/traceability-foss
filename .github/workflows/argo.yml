#    Copyright (c) 2023 Contributors to the Eclipse Foundation
#
#    See the NOTICE file(s) distributed with this work for additional
#    information regarding copyright ownership.
#
#    This program and the accompanying materials are made available under the
#    terms of the Apache License, Version 2.0 which is available at
#    https://www.apache.org/licenses/LICENSE-2.0.
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
#
#  SPDX-License-Identifier: Apache-2.0

# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
name: Reset Argo ENV and Testdata import

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Which Environment
        required: true
        options:
        - Dev/Test
        - E2E-A/E2E-B
        - int-a/int-b
      testdata_version:
        description: Which Testdata Version CX_Testdata_MessagingTest_v<X.X.X>.json e.g., 1.1.12"
        required: true
      argo_token:
        description: Argo Token
        required: true
      hard_refresh:
        type: choice
        description: Do you want a Hard Refresh? (+5min execution time)
        required: true
        options:
        - Yes
        - No

env:
    ARGO_TEST_REGISTRY: "https://argo.dev.demo.catena-x.net/api/v1/applications/tracex-dt-registry-test"
    ARGO_TEST_EDC_PROVIDER: "https://argo.dev.demo.catena-x.net/api/v1/applications/tracex-test-edc-provider"
    ARGO_TEST_TRACE_X_INSTANCE: "https://argo.dev.demo.catena-x.net/api/v1/applications/traceability-foss-test"
    ARGO_TEST_RegistryReload: "https://traceability-test.dev.demo.catena-x.net/api/registry/reload"

    ARGO_DEV_REGISTRY: "https://argo.dev.demo.catena-x.net/api/v1/applications/tracex-dt-registry-dev"
    ARGO_DEV_EDC_PROVIDER: "https://argo.dev.demo.catena-x.net/api/v1/applications/tracex-edc-provider"
    ARGO_DEV_TRACE_X_INSTANCE: "https://argo.dev.demo.catena-x.net/api/v1/applications/traceability-foss-dev"
    ARGO_DEV_RegistryReload: "https://traceability.dev.demo.catena-x.net/api/registry/reload"

    ARGO_E2E_A_REGISTRY: "https://argo.dev.demo.catena-x.net/api/v1/applications/tracex-dt-registry-e2e-a"
    ARGO_E2E_A_EDC_PROVIDER: "https://argo.dev.demo.catena-x.net/api/v1/applications/tracex-edc-provider-e2e-a"
    ARGO_E2E_A_TRACE_X_INSTANCE: "https://argo.dev.demo.catena-x.net/api/v1/applications/traceability-foss-e2e-a"
    ARGO_E2E_A_RegistryReload: "https://traceability-e2e-a.dev.demo.catena-x.net/api/registry/reload"

    ARGO_E2E_B_REGISTRY: "https://argo.dev.demo.catena-x.net/api/v1/applications/tracex-dt-registry-e2e-b"
    ARGO_E2E_B_EDC_PROVIDER: "https://argo.dev.demo.catena-x.net/api/v1/applications/tracex-edc-provider-e2e-b"
    ARGO_E2E_B_TRACE_X_INSTANCE: "https://argo.dev.demo.catena-x.net/api/v1/applications/traceability-foss-e2e-b"
    ARGO_E2E_B_RegistryReload: "https://traceability-e2e-b.dev.demo.catena-x.net/api/registry/reload"

    ARGO_INT_A_REGISTRY: "https://argo.int.demo.catena-x.net/api/v1/applications/tx-registry-int-a"
    ARGO_INT_A_EDC_PROVIDER: "https://argo.int.demo.catena-x.net/api/v1/applications/tx-edc-provider-int-a"
    ARGO_INT_A_TRACE_X_INSTANCE: "https://argo.int.demo.catena-x.net/api/v1/applications/traceability-foss-int-a"
    ARGO_INT_A_RegistryReload: "https://traceability-int-a.int.demo.catena-x.net/api/registry/reload"

    ARGO_INT_B_REGISTRY: "https://argo.int.demo.catena-x.net/api/v1/applications/tx-registry-int-b"
    ARGO_INT_B_EDC_PROVIDER: "https://argo.int.demo.catena-x.net/api/v1/applications/tx-edc-provider-int-b"
    ARGO_INT_B_TRACE_X_INSTANCE: "https://argo.int.demo.catena-x.net/api/v1/applications/traceability-foss-int-b"
    ARGO_INT_B_RegistryReload: "https://traceability-int-b.int.demo.catena-x.net/api/registry/reload"

jobs:
  test_input:
   runs-on: ubuntu-latest
   steps:

      - name: Checkout-Repository
        uses: actions/checkout@v4

      - name: mask token
        run: |
          ARGO_TOKEN=$(jq -r '.inputs.argo_token' $GITHUB_EVENT_PATH)
          echo ::add-mask::$ARGO_TOKEN
          echo ARGO_TOKEN=$ARGO_TOKEN >> $GITHUB_ENV

      - name: Check Testdata Version Format
        run: |
         if [[ ! "${{ github.event.inputs.testdata_version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid Testdata Version format. Please use X.X.X, e.g., 1.1.12"
          exit 1
         fi

      - name: Check Argo Token
        run: |

           source ./.github/argo/argo_config.sh

           if [ "${{ github.event.inputs.environment }}" == "Dev/Test" ]; then
              resources="${DEV_TEST_RESOURCES[2]}"
            elif [ "${{ github.event.inputs.environment }}" == "E2E-A/E2E-B" ]; then
              resources="${E2E_RESOURCES[2]}"
            elif [ "${{ github.event.inputs.environment }}" == "int-a/int-b" ]; then
              resources="${INT_RESOURCES[2]}"
            fi

           data=$(curl -X GET -H "Authorization: Bearer ${{ env.ARGO_TOKEN }}" "$resources")
           status_app=$(echo "$data" | jq -r '.status.sync.status')
           if [ $status_app != null ]; then
             echo "Argo Token is valid."
           else
            echo "Argo Token is invalid."
            exit 1
           fi


  print_environment:
   needs: test_input
   runs-on: ubuntu-latest
   steps:
      - name: ${{ github.event.inputs.environment }}
        run: |
          echo "### inputs" >> $GITHUB_STEP_SUMMARY
          echo "- environment: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY


  hard_refresh_environment:
   needs: print_environment
   runs-on: ubuntu-latest
   steps:

      - name: Checkout-Repository
        uses: actions/checkout@v4

      - name: mask token
        run: |
          ARGO_TOKEN=$(jq -r '.inputs.argo_token' $GITHUB_EVENT_PATH)
          echo ::add-mask::$ARGO_TOKEN
          echo ARGO_TOKEN=$ARGO_TOKEN >> $GITHUB_ENV

      - name: Hard refresh environment ${{ github.event.inputs.environment }}
        run: |
         source ./.github/argo/argo_config.sh

         if [ "${{ github.event.inputs.hard_refresh }}" == "true" ]; then
           if [ "${{ github.event.inputs.environment }}" == "Dev/Test" ]; then
              resources=("${DEV_TEST_RESOURCES[@]}")
           elif [ "${{ github.event.inputs.environment }}" == "E2E-A/E2E-B" ]; then
              resources=("${E2E_RESOURCES[@]}")
           elif [ "${{ github.event.inputs.environment }}" == "int-a/int-b" ]; then
              resources=("${INT_RESOURCES[@]}")
           fi

           for resource in "${resources[@]}"; do
             curl -X GET -H "Authorization: Bearer ${{ env.ARGO_TOKEN }}" "$resource?refresh=hard&appNamespace=argocd"
           done
           sleep 40
         elif [ "${{ github.event.inputs.hard_refresh }}" == "false" ]; then
          echo "Hard refresh skipped"
         fi

  delete_environment:
    needs: hard_refresh_environment
    runs-on: ubuntu-latest
    steps:

      - name: Checkout-Repository
        uses: actions/checkout@v4

      - name: mask token
        run: |
          ARGO_TOKEN=$(jq -r '.inputs.argo_token' $GITHUB_EVENT_PATH)
          echo ::add-mask::$ARGO_TOKEN
          echo ARGO_TOKEN=$ARGO_TOKEN >> $GITHUB_ENV

      - name: Delete Argo Environment
        run: |
         source ./.github/argo/argo_config.sh

         if [ "${{ github.event.inputs.environment }}" == "Dev/Test" ]; then
            resources=("${DELETE_DEV_TEST_RESOURCES[@]}")
         elif [ "${{ github.event.inputs.environment }}" == "E2E-A/E2E-B" ]; then
            resources=("${DELETE_E2E_RESOURCES[@]}")
         elif [ "${{ github.event.inputs.environment }}" == "int-a/int-b" ]; then
            resources=("${DELETE_INT_RESOURCES[@]}")
         fi

         for resource in "${resources[@]}"; do
           curl -X DELETE -H "Authorization: Bearer ${{ env.ARGO_TOKEN }}" "$resource"
           sleep 2
         done
         sleep 10

  change_target_revision:
      needs: delete_environment
      runs-on: ubuntu-latest
      steps:

        - name: mask token
          run: |
            ARGO_TOKEN=$(jq -r '.inputs.argo_token' $GITHUB_EVENT_PATH)
            echo ::add-mask::$ARGO_TOKEN
            echo ARGO_TOKEN=$ARGO_TOKEN >> $GITHUB_ENV

        - name: Change TargetRevison
          run: |
            new_target_revision=${{ github.ref_name }}

            if [ "${{ github.event.inputs.environment }}" == "Dev/Test" ]; then

              json_data1=$(curl -X GET -H "Authorization: Bearer ${{ env.ARGO_TOKEN }}" "$ARGO_TEST_TRACE_X_INSTANCE")
              old_TargetRevision1=$(echo "$json_data1" | jq -r '.spec.source.targetRevision')
              json_data2=$(curl -X GET -H "Authorization: Bearer ${{ env.ARGO_TOKEN }}" "$ARGO_DEV_TRACE_X_INSTANCE")
              old_TargetRevision2=$(echo "$json_data2" | jq -r '.spec.source.targetRevision')

              if [ "$old_TargetRevision1" != "$new_target_revision" ]; then
                updated_json1=$(echo "$json_data1" | jq ".spec.source.targetRevision = \"$new_target_revision\"")
                curl -X PUT -H "Content-Type: application/json" -H "Authorization: Bearer ${{ env.ARGO_TOKEN }}" -d "$updated_json1" "$ARGO_TEST_TRACE_X_INSTANCE"
                echo "Target Revision for Test overwritten"
              fi

              if [ "$old_TargetRevision2" != "$new_target_revision" ]; then
                updated_json2=$(echo "$json_data2" | jq ".spec.source.targetRevision = \"$new_target_revision\"")
                curl -X PUT -H "Content-Type: application/json" -H "Authorization: Bearer ${{ env.ARGO_TOKEN }}" -d "$updated_json2" "$ARGO_DEV_TRACE_X_INSTANCE"
                echo "Target Revision for Dev overwritten"
              fi


            elif [ "${{ github.event.inputs.environment }}" == "E2E-A/E2E-B" ]; then

              json_data1=$(curl -X GET -H "Authorization: Bearer ${{ env.ARGO_TOKEN }}" "$ARGO_E2E_A_TRACE_X_INSTANCE")
              old_TargetRevision1=$(echo "$json_data1" | jq -r '.spec.source.targetRevision')
              json_data2=$(curl -X GET -H "Authorization: Bearer ${{ env.ARGO_TOKEN }}" "$ARGO_E2E_B_TRACE_X_INSTANCE")
              old_TargetRevision2=$(echo "$json_data2" | jq -r '.spec.source.targetRevision')

              if [ "$old_TargetRevision1" != "$new_target_revision" ]; then
                updated_json1=$(echo "$json_data1" | jq ".spec.source.targetRevision = \"$new_target_revision\"")
                curl -X PUT -H "Content-Type: application/json" -H "Authorization: Bearer ${{ env.ARGO_TOKEN }}" -d "$updated_json1" "$ARGO_E2E_A_TRACE_X_INSTANCE"
                echo "Target Revision for e2e-a overwritten"
              fi

              if [ "$old_TargetRevision2" != "$new_target_revision" ]; then
                updated_json2=$(echo "$json_data2" | jq ".spec.source.targetRevision = \"$new_target_revision\"")
                curl -X PUT -H "Content-Type: application/json" -H "Authorization: Bearer ${{ env.ARGO_TOKEN }}" -d "$updated_json2" "$ARGO_E2E_B_TRACE_X_INSTANCE"
                echo "Target Revision for e2e-b overwritten"
              fi

            fi

  sync_environment:
      needs: change_target_revision
      runs-on: ubuntu-latest
      steps:

        - name: Checkout-Repository
          uses: actions/checkout@v4

        - name: mask token
          run: |
            ARGO_TOKEN=$(jq -r '.inputs.argo_token' $GITHUB_EVENT_PATH)
            echo ::add-mask::$ARGO_TOKEN
            echo ARGO_TOKEN=$ARGO_TOKEN >> $GITHUB_ENV

        - name: Sync Argo Environment
          run: |
            source ./.github/argo/argo_config.sh

            if [ "${{ github.event.inputs.environment }}" == "Dev/Test" ]; then
              resources=("${SYNC_DEV_TEST_RESOURCES[@]}")
            elif [ "${{ github.event.inputs.environment }}" == "E2E-A/E2E-B" ]; then
             resources=("${SYNC_E2E_RESOURCES[@]}")
            elif [ "${{ github.event.inputs.environment }}" == "int-a/int-b" ]; then
             resources=("${SYNC_INT_RESOURCES[@]}")
            fi

              for resource in "${resources[@]}"; do
              curl -X POST -H "Authorization: Bearer ${{ env.ARGO_TOKEN }}" "$resource"
            done
            sleep 20


  test_state:
      needs: sync_environment
      runs-on: ubuntu-latest
      timeout-minutes: 15
      steps:

        - name: Checkout code
          uses: actions/checkout@v4

        - name: mask token
          run: |
            ARGO_TOKEN=$(jq -r '.inputs.argo_token' $GITHUB_EVENT_PATH)
            echo ::add-mask::$ARGO_TOKEN
            echo ARGO_TOKEN=$ARGO_TOKEN >> $GITHUB_ENV

        - name: test apps state
          run: |
           source ./.github/argo/argo_config.sh
           if [ "${{ github.event.inputs.environment }}" == "Dev/Test" ]; then
              resources=("${DEV_TEST_RESOURCES[@]}")
            elif [ "${{ github.event.inputs.environment }}" == "E2E-A/E2E-B" ]; then
              resources=("${E2E_RESOURCES[@]}")
            elif [ "${{ github.event.inputs.environment }}" == "int-a/int-b" ]; then
              resources=("${INT_RESOURCES[@]}")
            fi

              for resource in "${resources[@]}"; do
                while true; do
                   json_data=$(curl -X GET -H "Authorization: Bearer ${{ env.ARGO_TOKEN }}" "$resource")
                   status=$(echo "$json_data" | jq -r '.status.sync.status')
                   health=$(echo "$json_data" | jq -r '.status.health.status')
                   operationState=$(echo "$json_data" | jq -r '.status.operationState.phase')
                   if [ "$status" == "Synced" ] && [ "$health" == "Healthy" ] && [ "$operationState" == "Succeeded" ]; then
                    echo "ready"
                    break
                  elif [ "$operationState" == "Failed" ] || ([ "$status" == "OutOfSync" ] && [ "$operationState" == "Failed" ]) || ([ "$status" == "OutOfSync" ] && [ "$operationState" == "Succeeded" ]); then
                    echo "Another sync"
                    curl -X POST -H "Authorization: Bearer ${{ env.ARGO_TOKEN }}" "$resource/sync"
                    sleep 10
                  elif [ "$status" == "OutOfSync" ] && [ "$operationState" == "Running" ]; then
                    echo "First terminate sync then start another sync"
                    curl -X DELETE -H "Authorization: Bearer ${{ env.ARGO_TOKEN }}" "$resource/operation?appNamespace=argocd"
                    sleep 10
                    curl -X POST -H "Authorization: Bearer ${{ env.ARGO_TOKEN }}" "$resource/sync"
                    sleep 10
                  else
                    echo "Wait"
                    sleep 10
                  fi
                done
              done
              sleep 120

  upload_testdata:
    needs: test_state
    runs-on: ubuntu-latest
    steps:

     - name: Checkout code
       uses: actions/checkout@v4

     - name: Set up Python
       uses: actions/setup-python@v5
       with:
        python-version: '3.11'

     - name: Upload testdata
       run: |
        python -m pip install requests
        curl -o transform-and-upload.py https://raw.githubusercontent.com/catenax-ng/tx-item-relationship-service/main/local/testing/testdata/transform-and-upload.py
        if [ "${{ github.event.inputs.environment }}" == "Dev/Test" ]; then
          python transform-and-upload.py -f ./tx-backend/testdata/CX_Testdata_MessagingTest_v${{ github.event.inputs.testdata_version }}.json -s https://traceability-test.dev.demo.catena-x.net/api/submodel -edc https://trace-x-test-edc.dev.demo.catena-x.net -a https://trace-x-registry-test.dev.demo.catena-x.net/semantics/registry/api/v3.0 -d https://trace-x-test-edc-dataplane.dev.demo.catena-x.net -p id-3.0-trace -k ${{ secrets.TRACE_X_API_KEY_DEV }} --aas3 --allowedBPNs BPNL00000003CML1 BPNL00000003CNKC
          sleep 10
          python transform-and-upload.py -f ./tx-backend/testdata/CX_Testdata_MessagingTest_v${{ github.event.inputs.testdata_version }}.json -s https://traceability.dev.demo.catena-x.net/api/submodel -edc https://trace-x-edc.dev.demo.catena-x.net -a https://trace-x-registry.dev.demo.catena-x.net/semantics/registry/api/v3.0 -d https://trace-x-edc-dataplane.dev.demo.catena-x.net -p id-3.0-trace -k ${{ secrets.TRACE_X_API_KEY_DEV }} --aas3 --allowedBPNs BPNL00000003CML1 BPNL00000003CNKC
          sleep 10
        elif [ "${{ github.event.inputs.environment }}" == "E2E-A/E2E-B" ]; then
          python transform-and-upload.py -f ./tx-backend/testdata/CX_Testdata_MessagingTest_v${{ github.event.inputs.testdata_version }}.json -s https://traceability-e2e-a.dev.demo.catena-x.net/api/submodel -edc https://trace-x-edc-e2e-a.dev.demo.catena-x.net -a https://trace-x-registry-e2e-a.dev.demo.catena-x.net/semantics/registry/api/v3.0 -d https://trace-x-edc-e2e-a-dataplane.dev.demo.catena-x.net -p id-3.0-trace -k ${{ secrets.TRACE_X_API_KEY_DEV }} --aas3 --allowedBPNs BPNL00000003CML1 BPNL00000003CNKC
          sleep 10
          python transform-and-upload.py -f ./tx-backend/testdata/CX_Testdata_MessagingTest_v${{ github.event.inputs.testdata_version }}.json -s https://traceability-e2e-b.dev.demo.catena-x.net/api/submodel -edc https://trace-x-edc-e2e-b.dev.demo.catena-x.net -a https://trace-x-registry-e2e-b.dev.demo.catena-x.net/semantics/registry/api/v3.0 -d https://trace-x-edc-e2e-b-dataplane.dev.demo.catena-x.net -p id-3.0-trace -k ${{ secrets.TRACE_X_API_KEY_DEV }} --aas3 --allowedBPNs BPNL00000003CML1 BPNL00000003CNKC
          sleep 10
        elif [ "${{ github.event.inputs.environment }}" == "int-a/int-b" ]; then
          python transform-and-upload.py -f ./tx-backend/testdata/CX_Testdata_MessagingTest_v${{ github.event.inputs.testdata_version }}.json -s https://traceability-int-a.int.demo.catena-x.net/api/submodel -edc https://trace-x-edc-int-a.int.demo.catena-x.net -a https://trace-x-registry-int-a.int.demo.catena-x.net/semantics/registry/api/v3.0 -d https://trace-x-edc-int-a-dataplane.int.demo.catena-x.net -p id-3.0-trace -k ${{ secrets.TRACE_X_API_KEY_INT_A }} --aas3 --allowedBPNs BPNL00000003CML1 BPNL00000003CNKC BPNL00000003AZQP BPNL00000003CSGV
          sleep 10
          python transform-and-upload.py -f ./tx-backend/testdata/CX_Testdata_MessagingTest_v${{ github.event.inputs.testdata_version }}.json -s https://traceability-int-b.int.demo.catena-x.net/api/submodel -edc https://trace-x-edc-int-b.int.demo.catena-x.net -a https://trace-x-registry-int-b.int.demo.catena-x.net/semantics/registry/api/v3.0 -d https://trace-x-edc-int-b-dataplane.int.demo.catena-x.net -p id-3.0-trace -k ${{ secrets.TRACE_X_API_KEY_INT_B }} --aas3 --allowedBPNs BPNL00000003CML1 BPNL00000003CNKC BPNL00000003AZQP BPNL00000003CSGV
          sleep 10
        fi
  registry_reload:
    needs:
    - upload_testdata
    runs-on: ubuntu-latest
    steps:
    - name: reload the registry
      run: |

        if [ "${{ github.event.inputs.environment }}" == "Dev/Test" ]; then
          curl -X GET "$ARGO_TEST_RegistryReload"
          curl -X GET "$ARGO_DEV_RegistryReload"
        elif [ "${{ github.event.inputs.environment }}" == "E2E-A/E2E-B" ]; then
          curl -X GET "$ARGO_E2E_A_RegistryReload"
          curl -X GET "$ARGO_E2E_B_RegistryReload"
        elif [ "${{ github.event.inputs.environment }}" == "int-a/int-b" ]; then
          curl -X GET "$ARGO_INT_A_RegistryReload"
          curl -X GET "$ARGO_INT_B_RegistryReload"
        fi
