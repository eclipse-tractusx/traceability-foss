#
# Copyright (c) 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

configuration:
  env:
    bpn: &bpn 'BPNL000000000DWF'
    bpnA: &bpnA 'BPNLDECCFFGYEZDB'
    bpnB: &bpnB 'BPNL123000789ABC'
  frontend:
    name: &fe_name 'tx-frontend-int-b'
    hostName: &fe_host_name 'traceability-portal-int-b.int.catena-x.net'
    backendApiUrl: &be_api_url <path:traceability-foss/data/int-b/frontend#catenax_portal_api_url>
    allowedReferer: &allowed_referer <path:traceability-foss/data/int-b/frontend#allowed_referer>
    imprintUrl: &imprint_url 'https://traceability-portal-int-b.int.catena-x.net'
    privacyUrl: &privacy_url 'https://traceability-portal-int-b.int.catena-x.net'
  backend:
    name: &backend_name 'tx-backend-int-b'
    hostName: &be_host_name 'traceability-int-b.int.catena-x.net'
    # -- backend host with https://
    url: &be_url 'https://traceability-int-b.int.catena-x.net'
    internalUrl: &be_url_internal 'http://tx-backend-int-b:8080'
    edcClient:
      callbackUrl: &backend_edc_client_callback_url 'http://tx-backend-int-b:8080/api/internal/endpoint-data-reference'
    backendDatabase:
      url: &backend_database_url 'jdbc:postgresql://tx-backend-postgresql-int-b:5432/trace'
      name: &backend_database_name 'tx-backend-postgresql-int-b'
      password: &backend_database_password <path:traceability-foss/data/int-b/database#tracePassword>
      rootPassword: &backend_database_root_password <path:traceability-foss/data/int-b/database#postgresPassword>
    technicalServiceApiKey: &technical_service_api_key <path:traceability-foss/data/int-b/backend#TECHNICAL_SERVICE_API_KEY>
    tracexAdminKey: &tracexAdminKey <path:traceability-foss/data/int-b/backend#ADMIN_API_KEY>
    security:
      # -- required to allow FE connection
      allowedCorsOriginFirst: &backend_security_allowed_fe 'https://traceability-portal-int-b.int.catena-x.net/'
      allowedCorsOriginSecond: &backend_security_allowed_fe_second 'https://traceability-portal-int-b.int.catena-x.net/'
    provisioning:
      submodel:
        urlExternal: &submodel_url_external 'http://tracexb-submodel:8080/v1/aas/submodels/data'
        urlInternal: &submodel_url_internal 'http://tracexb-submodel:8080/v1/aas/submodels/data'
        oauthProviderRegistrationId: &submodel_provider_registration_id <path:traceability-foss/data/int-b/provisioning#SUBMODEL_OAUTH_PROVIDER_REGISTRATION_ID>
        oauthTokenUrl: &submodel_token_url <path:traceability-foss/data/int-b/provisioning#SUBMODEL_OAUTH_TOKEN_URL>
        clientId: &submodel_client_id <path:traceability-foss/data/int-b/provisioning#SUBMODEL_OAUTH_CLIENT_ID>
        clientSecret: &submodel_client_secret <path:traceability-foss/data/int-b/provisioning#SUBMODEL_OAUTH_CLIENT_SECRET>
      registry:
        allowedBpns: &allowed_bpns 'BPNL000000002CS4,BPNL000000002BR4'
        urlExternalWithPath: &registry_url_external_with_path 'http://tracexb-dtr:8080/api/v3'
        urlInternalWithPath: &registry_url_internal_with_path 'http://tracexb-dtr:8080/api/v3'
        oauthProviderRegistrationId: &registry_provider_registration_id <path:traceability-foss/data/int-b/provisioning#REGISTRY_OAUTH_PROVIDER_REGISTRATION_ID>
        oauthTokenUrl: &registry_token_url <path:traceability-foss/data/int-b/provisioning#REGISTRY_OAUTH_TOKEN_URL>
        clientId: &registry_client_id <path:traceability-foss/data/int-b/provisioning#REGISTRY_OAUTH_CLIENT_ID>
        clientSecret: &registry_client_secret <path:traceability-foss/data/int-b/provisioning#REGISTRY_OAUTH_CLIENT_SECRET>
        edcAssetId: &registry_edc_asset_id trace-x-dtr-asset
  pgadmin4:
    name: &pgadmin_name 'tx-pgadmin-int-b'
    hostName: &pgadmin_host_name 'tx-pgadmin-int-b.int.catena-x.net'
    password: &pgadmin_password <path:traceability-foss/data/int-b/database#pgadminPassword>

  irs:
    name: &irs_name 'tx-irs-int-b'
    hostName: &irs_host_name "tx-irs-int-b.int.catena-x.net"
    url: &irs_url 'https://tx-irs-int-b.int.catena-x.net'
    negotiationCallbackurl: &irsNegotiationCallbackurl 'http://tx-irs-int-b:8181/internal/negotiation-callback'
    callbackurl: &irsCallbackurl 'http://tx-irs-int-b:8181/internal/endpoint-data-reference'
    irsDatabase:
      name: &irs_database_name 'tx-irs-minio-int-b'
      username: &irs_database_username <path:traceability-foss/data/int-b/irs#MINIO_USER>
      password: &irs_database_password <path:traceability-foss/data/int-b/irs#MINIO_PW>
      url: &irs_database_url 'http://tx-irs-minio-int-b:9000'

  edc:
    provider:
      apiKey: &edc_provider_api_key <path:traceability-foss/data/int-b/edc/controlplane#edc.api.control.auth.apikey.value>
      controlPlaneHost: &edc_provider_controlplane_url 'https://trace-x-edc-int-b.int.catena-x.net'
      dataPlaneHost: &edc_provider_dataplane_url 'https://trace-x-edc-int-b-dataplane.int.catena-x.net'
    consumer:
      name: &edc_name 'tx-edc-consumer-int-b'
      apiKey: &edc_api_key <path:traceability-foss/data/int-b/edc/controlplane#edc.api.control.auth.apikey.value>
      controlplane:
        hostName: &edc_controlplane_hostname 'tx-edc-consumer-int-b-controlplane.int.catena-x.net'
        managementUrl: &edc_controlplane_management_url 'https://tx-edc-consumer-int-b-controlplane.int.catena-x.net/management'
      dataplane:
        hostName: &edc_dataplane_hostname 'tx-edc-consumer-int-b-dataplane.int.catena-x.net'
      edcDatabase:
        name: &edc_database_name 'tx-edc-consumer-postgresql-int-b'
        username: &edc_database_username <path:traceability-foss/data/int-b/edc/database#user>
        password: &edc_database_password <path:traceability-foss/data/int-b/edc/database#password>
        jdbcUrl: &edc_database_jdbc_url "jdbc:postgresql://tx-edc-consumer-postgresql-int-b-hl:5432/edc"
      vault:
        hashicorp:
          url: &vault_url 'https://vault.core.catena-x.net'
          token: &vault_token <path:traceability-foss/data/int-b/edc#edc.vault.hashicorp.token>
        secretNames:
          transferProxyTokenSignerPrivateKey: &edc_private_key daps-cert-key-int-b
          transferProxyTokenSignerPublicKey: &edc_public_key daps-cert-int-b
          transferProxyTokenEncryptionAesKey: &edc_encryption_key token-signer-aes-key

  portal:
    domain: &portal_domain <path:traceability-foss/data/int-b/frontend#catenax_portal_backend_domain>
    url: &portal_url <path:traceability-foss/data/int-b/frontend#catenax_portal_url>
    backend:
      url: &portal_backend_url 'https://portal-backend.int.catena-x.net/api'
    discoveryFinderUrl: &discovery_finder_url 'https://semantics.int.catena-x.net/discoveryfinder/api/v1.0/administration/connectors/discovery/search'
    serviceAccount:
      clientId: &service_account_id <path:traceability-foss/data/int-b/keycloak/oauth2#clientId> # sa267
      clientPassword: &service_account_password <path:traceability-foss/data/int-b/keycloak/oauth2#clientSecret>
    auth:
      keycloakUrl: &portal_auth_keycloak_url <path:traceability-foss/data/int-b/frontend#catenax_portal_keycloak_url>
      tokenUri: &central_idp_token_uri 'https://centralidp.int.catena-x.net/auth/realms/CX-Central/protocol/openid-connect/token'
      jwkUri: &central_idp_jwk_uri 'https://centralidp.int.catena-x.net/auth/realms/CX-Central/protocol/openid-connect/certs'
      resourceClient: &central_idp_resource_client <path:traceability-foss/data/int-b/keycloak/oauth2#appId>

  semanticHub: &semantichub_models_url 'https://semantics.int.catena-x.net/hub/api/v1/models'

  partnersPool: &partners_pool_url 'https://partners-pool.int.catena-x.net'

  digitalTwinRegistry:
    allowedBpns: &allowed_bpns 'BPNL000000000DWF,BPNL000000000UKM,BPNL000000000EVQ'
    url: &dtr_url 'https://trace-x-registry-int-b.int.catena-x.net/semantics/registry/api/v3'
    descriptorEndpoint: &dtr_shell_descriptor_url 'https://trace-x-registry-int-b.int.catena-x.net/semantics/registry/api/v3/shell-descriptors/{aasIdentifier}'
    shellLookupEndpoint: &dtr_shell_lookup_url 'https://trace-x-registry-int-b.int.catena-x.net/semantics/registry/api/v3/lookup/shells?assetIds={assetIds}'

#########################
# Frontend Chart Values configuration     #
#########################
frontend:
  nameOverride: *fe_name
  fullnameOverride: *fe_name
  image:
    CATENAX_PORTAL_API_URL: *be_api_url
    CATENAX_PORTAL_KEYCLOAK_URL: *portal_auth_keycloak_url
    CATENAX_PORTAL_BACKEND_DOMAIN: *portal_domain
    CATENAX_PORTAL_URL: *portal_url
    CATENAX_PORTAL_CLIENT_ID: *central_idp_resource_client
    ALLOWED_REFERER: *allowed_referer
    BPN: *bpn
    IMPRINT_URL: *imprint_url
    PRIVACY_URL: *privacy_url

  ingress:
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/ssl-passthrough: "false"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    hosts:
      - host: *fe_host_name
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - hosts:
          - *fe_host_name
        secretName: tls-secret-tx-fe-int-b

#########################
# Backend Chart Values configuration     #
#########################
backend:
  nameOverride: *backend_name
  fullnameOverride: *backend_name

  ingress:
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/ssl-passthrough: "false"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    hosts:
      - host: *be_host_name
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - hosts:
          - *be_host_name
        secretName: tls-secret-tx-be-int-b
  healthCheck:
    enabled: false
  traceability:
    bpn: *bpn
    bpnA: *bpnA
    bpnB: *bpnB
    url: *be_url
    internalUrl: *be_url_internal
    technicalServiceApiKey: *technical_service_api_key
    tracexAdminKey: *tracexAdminKey
    discoveryType: bpn

  provisioning:
    submodel:
      urlExternal: *submodel_url_external
      urlInternal: *submodel_url_internal
      oauthProviderRegistrationId: *submodel_provider_registration_id
      oauthTokenUrl: *submodel_token_url
      clientId: *submodel_client_id
      clientSecret: *submodel_client_secret
    registry:
      urlExternalWithPath: *registry_url_external_with_path
      urlInternalWithPath: *registry_url_internal_with_path
      allowedBpns: *allowed_bpns
      oauthEnabled: true
      oauthProviderRegistrationId: *registry_provider_registration_id
      oauthTokenUrl: *registry_token_url
      clientId: *registry_client_id
      clientSecret: *registry_client_secret
      edcAssetId: *registry_edc_asset_id

  irsAdminApiKey: &irs_admin_api_key <path:traceability-foss/data/int-b/irs#API_KEY_ADMIN>
  irsRegularApiKey: &irs_regular_api_key <path:traceability-foss/data/int-b/irs#API_KEY_REGULAR>

  datasource:
    url: *backend_database_url
    password: *backend_database_password

  oauth2:
    clientId: *service_account_id
    clientSecret: *service_account_password
    clientTokenUri: *central_idp_token_uri
    jwkSetUri: *central_idp_jwk_uri
    resourceClient: *central_idp_resource_client

  edc:
    providerApiKey: *edc_api_key
    consumerApiKey: *edc_api_key
    providerUrl: *edc_provider_controlplane_url
    providerDataplaneUrl: *edc_provider_dataplane_url
    callbackUrlEdcClient: *backend_edc_client_callback_url
    dataEndpointUrl: *edc_controlplane_management_url

  discoveryfinder:
    baseUrl: *discovery_finder_url

  irs:
    baseUrl: *irs_url
  registry:
    urlWithPath: *dtr_url
    allowedBpns: *allowed_bpns
  portal:
    baseUrl: *portal_backend_url

  config:
    allowedCorsOriginFirst: *backend_security_allowed_fe
    allowedCorsOriginSecond: *backend_security_allowed_fe_second

  dependencies:
    irs: *irs_name
    edc: *edc_name

  resources:
    limits:
      cpu: 1000m
      memory: 512Mi
    requests:
      cpu: 15m
      memory: 512Mi

#########################
# PG Admin configuration     #
#########################
pgadmin4:
  nameOverride: *pgadmin_name
  fullnameOverride: *pgadmin_name
  ingress:
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    hosts:
      - host: *pgadmin_host_name
        paths:
          - path: /
            pathType: Prefix
    tls:
      - hosts:
          - *pgadmin_host_name
        secretName: tls-secret-tx-pgadmin
  env:
    password: *pgadmin_password
  resources:
    limits:
      cpu: 100m
      memory: 512Mi
    requests:
      cpu: 15m
      memory: 512Mi

#########################
# Postgres configuration     #
#########################
postgresql:
  primary:
    persistence:
      size: 4Gi
  nameOverride: *backend_database_name
  fullnameOverride: *backend_database_name

  auth:
    postgresPassword: *backend_database_root_password  # Do we need 2 passwords ? or can reuse the one below
    password: *backend_database_password

#########################
# IRS configuration     #
#########################
item-relationship-service:
  job:
    batch:
      threadCount: 5
    scheduled:
      threadCount: 5
    cached:
      threadCount: 5
  apiKeyAdmin: *irs_admin_api_key
  apiKeyRegular: *irs_regular_api_key
  nameOverride: *irs_name
  fullnameOverride: *irs_name
  bpn: *bpn
  namespace: product-traceability-foss
  irsUrl: *irs_url
  ingress:
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/ssl-passthrough: "false"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    hosts:
      - host: *irs_host_name
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - hosts:
          - *irs_host_name
        secretName: tls-secret-tx-irs-ev-b
  discovery:
    type: bpn
    discoveryFinderUrl: *discovery_finder_url
  digitalTwinRegistry:
    descriptorEndpoint: *dtr_shell_descriptor_url
    shellLookupEndpoint: *dtr_shell_lookup_url

  semanticshub:
    #url: *semantichub_models_url
    localModels:
      # urn:samm:io.catenax.single_level_bom_as_planned:3.0.0#SingleLevelBomAsPlanned
      dXJuOnNhbW06aW8uY2F0ZW5heC5zaW5nbGVfbGV2ZWxfYm9tX2FzX3BsYW5uZWQ6My4wLjAjU2luZ2xlTGV2ZWxCb21Bc1BsYW5uZWQ: 
      # urn:samm:io.catenax.part_as_planned:2.0.0#PartAsPlanned
      dXJuOnNhbW06aW8uY2F0ZW5heC5wYXJ0X2FzX3BsYW5uZWQ6Mi4wLjAjUGFydEFzUGxhbm5lZA: 
      # urn:samm:io.catenax.single_level_bom_as_built:3.0.0#SingleLevelBomAsBuilt
      dXJuOnNhbW06aW8uY2F0ZW5heC5zaW5nbGVfbGV2ZWxfYm9tX2FzX2J1aWx0OjMuMC4wI1NpbmdsZUxldmVsQm9tQXNCdWlsdA: 
      # urn:samm:io.catenax.single_level_usage_as_built:3.0.0#SingleLevelUsageAsBuilt
      dXJuOnNhbW06aW8uY2F0ZW5heC5zaW5nbGVfbGV2ZWxfdXNhZ2VfYXNfYnVpbHQ6My4wLjAjU2luZ2xlTGV2ZWxVc2FnZUFzQnVpbHQ: 
      # urn:samm:io.catenax.batch:3.0.0#Batch
      dXJuOnNhbW06aW8uY2F0ZW5heC5iYXRjaDozLjAuMCNCYXRjaA: 
      # urn:samm:io.catenax.just_in_sequence_part:3.0.0#JustInSequencePart
      dXJuOnNhbW06aW8uY2F0ZW5heC5qdXN0X2luX3NlcXVlbmNlX3BhcnQ6My4wLjAjSnVzdEluU2VxdWVuY2VQYXJ0: 
      # urn:samm:io.catenax.serial_part:3.0.0#SerialPart
      dXJuOnNhbW06aW8uY2F0ZW5heC5zZXJpYWxfcGFydDozLjAuMCNTZXJpYWxQYXJ0: ew0KICAiJHNjaGVtYSIgOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEiLA0KICAiZGVzY3JpcHRpb24iIDogIkEgc2VyaWFsaXplZCBwYXJ0IGlzIGFuIGluc3RhbnRpYXRpb24gb2YgYSAoZGVzaWduLSlwYXJ0LCB3aGVyZSB0aGUgcGFydGljdWxhciBpbnN0YW50aWF0aW9uIGNhbiBiZSB1bmlxdWVseSBpZGVudGlmaWVkIGJ5IG1lYW5zIG9mIGEgc2VyaWFsIG51bWJlciBvciBhIHNpbWlsYXIgaWRlbnRpZmllciAoZS5nLiBWQU4pb3IgYSBjb21iaW5hdGlvbiBvZiBtdWx0aXBsZSBpZGVudGlmaWVycyAoZS5nLiBjb21iaW5hdGlvbiBvZiBtYW51ZmFjdHVyZXIsIGRhdGUgYW5kIG51bWJlcikiLA0KICAidHlwZSIgOiAib2JqZWN0IiwNCiAgImNvbXBvbmVudHMiIDogew0KICAgICJzY2hlbWFzIiA6IHsNCiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4LnNoYXJlZC51dWlkXzIuMC4wX1V1aWRWNFRyYWl0IiA6IHsNCiAgICAgICAgInR5cGUiIDogInN0cmluZyIsDQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHByb3ZpZGVkIHJlZ3VsYXIgZXhwcmVzc2lvbiBlbnN1cmVzIHRoYXQgdGhlIFVVSUQgaXMgY29tcG9zZWQgb2YgZml2ZSBncm91cHMgb2YgY2hhcmFjdGVycyBzZXBhcmF0ZWQgYnkgaHlwaGVucywgaW4gdGhlIGZvcm0gOC00LTQtNC0xMiBmb3IgYSB0b3RhbCBvZiAzNiBjaGFyYWN0ZXJzICgzMiBoZXhhZGVjaW1hbCBjaGFyYWN0ZXJzIGFuZCA0IGh5cGhlbnMpLCBvcHRpb25hbGx5IHByZWZpeGVkIGJ5IFwidXJuOnV1aWQ6XCIgdG8gbWFrZSBpdCBhbiBJUkkuIiwNCiAgICAgICAgInBhdHRlcm4iIDogIiheWzAtOWEtZkEtRl17OH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17MTJ9JCl8KF51cm46dXVpZDpbMC05YS1mQS1GXXs4fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXsxMn0kKSINCiAgICAgIH0sDQogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5zZXJpYWxfcGFydF8zLjAuMF9LZXlUcmFpdCIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIkNvbnN0cmFpbnQgdGhhdCBlbnN1cmVzIHRoYXQgdGhlIHN0YW5kYXJkIGtleXMgYW5kIGN1c3RvbSBrZXkgcHJlZml4ZXMgY2FuIGJlIHVzZWQuIiwNCiAgICAgICAgInBhdHRlcm4iIDogIl4obWFudWZhY3R1cmVySWR8cGFydEluc3RhbmNlSWR8YmF0Y2hJZHx2YW58Y3VzdG9tS2V5OlxcdyspJCINCiAgICAgIH0sDQogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5zZXJpYWxfcGFydF8zLjAuMF9WYWx1ZUNoYXJhY3RlcmlzdGljIiA6IHsNCiAgICAgICAgInR5cGUiIDogInN0cmluZyIsDQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHZhbHVlIG9mIGFuIGlkZW50aWZpZXIuIg0KICAgICAgfSwNCiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4LnNlcmlhbF9wYXJ0XzMuMC4wX0tleVZhbHVlTGlzdCIgOiB7DQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiQSBsaXN0IG9mIGtleSB2YWx1ZSBwYWlycyBmb3IgbG9jYWwgaWRlbnRpZmllcnMsIHdoaWNoIGFyZSBjb21wb3NlZCBvZiBhIGtleSBhbmQgYSBjb3JyZXNwb25kaW5nIHZhbHVlLiIsDQogICAgICAgICJ0eXBlIiA6ICJvYmplY3QiLA0KICAgICAgICAicHJvcGVydGllcyIgOiB7DQogICAgICAgICAgImtleSIgOiB7DQogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBrZXkgb2YgYSBsb2NhbCBpZGVudGlmaWVyLiAiLA0KICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2VyaWFsX3BhcnRfMy4wLjBfS2V5VHJhaXQiDQogICAgICAgICAgfSwNCiAgICAgICAgICAidmFsdWUiIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgdmFsdWUgb2YgYW4gaWRlbnRpZmllci4iLA0KICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2VyaWFsX3BhcnRfMy4wLjBfVmFsdWVDaGFyYWN0ZXJpc3RpYyINCiAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgICJyZXF1aXJlZCIgOiBbICJrZXkiLCAidmFsdWUiIF0NCiAgICAgIH0sDQogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5zZXJpYWxfcGFydF8zLjAuMF9Mb2NhbElkZW50aWZpZXJDaGFyYWN0ZXJpc3RpYyIgOiB7DQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiQSBzaW5nbGUgc2VyaWFsaXplZCBwYXJ0IG1heSBoYXZlIG11bHRpcGxlIGF0dHJpYnV0ZXMsIHRoYXQgdW5pcXVlbHkgaWRlbnRpZnkgYSB0aGF0IHBhcnQgaW4gYSBzcGVjaWZpYyBkYXRhc3BhY2UgKGUuZy4gdGhlIG1hbnVmYWN0dXJlcmBzIGRhdGFzcGFjZSkiLA0KICAgICAgICAidHlwZSIgOiAiYXJyYXkiLA0KICAgICAgICAiaXRlbXMiIDogew0KICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LnNlcmlhbF9wYXJ0XzMuMC4wX0tleVZhbHVlTGlzdCINCiAgICAgICAgfSwNCiAgICAgICAgInVuaXF1ZUl0ZW1zIiA6IHRydWUNCiAgICAgIH0sDQogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5zZXJpYWxfcGFydF8zLjAuMF9EYXRlVGltZVRyYWl0IiA6IHsNCiAgICAgICAgInR5cGUiIDogInN0cmluZyIsDQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiUmVndWxhciBFeHByZXNzaW9uIHRvIGVuYWJsZSBVVEMgYW5kIFRpbWV6b25lIGZvcm1hdHMgYW5kIHRoZSBwb3NzaWJpbGl0eSB0byBleGNsdWRlIHRpbWUgaW5mb3JtYXRpb24uIiwNCiAgICAgICAgInBhdHRlcm4iIDogIl4oPzpbMC05XXs0fS1bMC05XXsyfS1bMC05XXsyfVRbMC05XXsyfTpbMC05XXsyfTpbMC05XXsyfSg/OlsuXVswLTldKyk/WnxbMC05XXs0fS1bMC05XXsyfS1bMC05XXsyfSg/OlRbMC05XXsyfTpbMC05XXsyfTpbMC05XXsyfSg/OlsuXVswLTldKyk/KD86WnxbKy1dWzAtOV17Mn06WzAtOV17Mn0pKT8pJCINCiAgICAgIH0sDQogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5zZXJpYWxfcGFydF8zLjAuMF9Qcm9kdWN0aW9uQ291bnRyeUNvZGVUcmFpdCIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIlJlZ3VsYXIgRXhwcmVzc2lvbiB0aGF0IGVuc3VyZXMgYSB0aHJlZS1sZXR0ZXIgY29kZSAiLA0KICAgICAgICAicGF0dGVybiIgOiAiXltBLVpdW0EtWl1bQS1aXSQiDQogICAgICB9LA0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLmJ1c2luZXNzX3BhcnRuZXJfbnVtYmVyXzIuMC4wX0JwbnNUcmFpdCIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBwcm92aWRlZCByZWd1bGFyIGV4cHJlc3Npb24gZW5zdXJlcyB0aGF0IHRoZSBCUE5TIGlzIGNvbXBvc2VkIG9mIHByZWZpeCAnQlBOUycsIDEwIGRpZ2l0cyBhbmQgdHdvIGFscGhhbnVtZXJpYyBsZXR0ZXJzLiIsDQogICAgICAgICJwYXR0ZXJuIiA6ICJeQlBOU1thLXpBLVowLTldezEyfSQiDQogICAgICB9LA0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnBhcnRfc2l0ZV9pbmZvcm1hdGlvbl9hc19idWlsdF8yLjAuMF9GdW5jdGlvbkNoYXJhY3RlcmlzdGljIiA6IHsNCiAgICAgICAgInR5cGUiIDogInN0cmluZyIsDQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiRGVzY3JpYmVzIHRoZSBjaGFyYWN0ZXJpc3RpY3Mgb2YgdGhlIGZ1bmN0aW9uIGZvciBhIHNpdGUgcmVsYXRlZCB0byB0aGUgcmVzcGVjdGl2ZSBwYXJ0LiIsDQogICAgICAgICJlbnVtIiA6IFsgInByb2R1Y3Rpb24iLCAid2FyZWhvdXNlIiwgInNwYXJlIHBhcnQgd2FyZWhvdXNlIiBdDQogICAgICB9LA0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnBhcnRfc2l0ZV9pbmZvcm1hdGlvbl9hc19idWlsdF8yLjAuMF9TaXRlc0VudGl0eSIgOiB7DQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiRGVzY3JpYmVzIHRoZSBJRCBhbmQgZnVuY3Rpb24gb2YgYSBzaXRlIGZvciB0aGUgYXNzb2NpYXRlZCBwYXJ0IGluIHRoZSBBc0J1aWx0IGNvbnRleHQoZS5nLiBTZXJpYWxQYXJ0LCBCYXRjaCwgaklTKS4iLA0KICAgICAgICAidHlwZSIgOiAib2JqZWN0IiwNCiAgICAgICAgInByb3BlcnRpZXMiIDogew0KICAgICAgICAgICJjYXRlbmFYc2l0ZUlkIiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGlkZW50aWZpZXIgb2YgdGhlIHNpdGUgYWNjb3JkaW5nIHRvIENhdGVuYS1YIEJQRE0uIFRoZSBjYXRlbmFYc2l0ZUlkIG11c3QgYmUgYSB2YWxpZCBDYXRlbmEtWCBCUE4uIFRoZSBCUE4gaXMgYSB1bmlxdWUsIHVuY2hhbmdlYWJsZSBpZGVudGlmaWVyIGZvciBCdXNpbmVzcyBQYXJ0bmVycyAvIGNvbXBhbnkgbG9jYXRpb25zIGZyb20gZm91bmRhdGlvbiB0byBjbG9zdXJlLCByZWdhcmRsZXNzIG9mIHRoZSBkaWZmZXJlbnQgYnVzaW5lc3MgcmVsYXRpb25zaGlwcyAvIHN0cnVjdHVyZXMgYmV0d2VlbiBvciB3aXRoaW4gdGhlIEJ1c2luZXNzIFBhcnRuZXJzIG9yIGNvbXBhbnkgbG9jYXRpb25zLiIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5zaGFyZWQuYnVzaW5lc3NfcGFydG5lcl9udW1iZXJfMi4wLjBfQnBuc1RyYWl0Ig0KICAgICAgICAgIH0sDQogICAgICAgICAgImZ1bmN0aW9uIiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGZ1bmN0aW9uIG9mIHRoZSBzaXRlIGluIHJlbGF0aW9uIHRvIHRoZSBwYXJ0KGkuZS4gdGhlIGFjdGl2aXR5IHdpdGhpbiB0aGUgdmFsdWUgY2hhaW4gb2YgdGhlIHBhcnQgdGhhdCBpcyBwZXJmb3JtZWQgYXQgdGhlIHNpdGUpIiwNCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LnNoYXJlZC5wYXJ0X3NpdGVfaW5mb3JtYXRpb25fYXNfYnVpbHRfMi4wLjBfRnVuY3Rpb25DaGFyYWN0ZXJpc3RpYyINCiAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgICJyZXF1aXJlZCIgOiBbICJjYXRlbmFYc2l0ZUlkIiwgImZ1bmN0aW9uIiBdDQogICAgICB9LA0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnBhcnRfc2l0ZV9pbmZvcm1hdGlvbl9hc19idWlsdF8yLjAuMF9TaXRlc0NoYXJhY3RlcmlzdGljIiA6IHsNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJTaXRlcyBDaGFyYWN0ZXJpc3RpYyIsDQogICAgICAgICJ0eXBlIiA6ICJhcnJheSIsDQogICAgICAgICJpdGVtcyIgOiB7DQogICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnBhcnRfc2l0ZV9pbmZvcm1hdGlvbl9hc19idWlsdF8yLjAuMF9TaXRlc0VudGl0eSINCiAgICAgICAgfSwNCiAgICAgICAgInVuaXF1ZUl0ZW1zIiA6IHRydWUNCiAgICAgIH0sDQogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5zZXJpYWxfcGFydF8zLjAuMF9NYW51ZmFjdHVyaW5nQ2hhcmFjdGVyaXN0aWMiIDogew0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIkNoYXJhY3RlcmlzdGljIHRvIGRlc2NyaWJlIG1hbnVmYWN0dXJpbmcgcmVsYXRlZCBkYXRhIiwNCiAgICAgICAgInR5cGUiIDogIm9iamVjdCIsDQogICAgICAgICJwcm9wZXJ0aWVzIiA6IHsNCiAgICAgICAgICAiZGF0ZSIgOiB7DQogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRpbWVzdGFtcCBvZiB0aGUgbWFudWZhY3R1cmluZyBkYXRlIGFzIHRoZSBmaW5hbCBzdGVwIGluIHByb2R1Y3Rpb24gcHJvY2VzcyAoZS5nLiBmaW5hbCBxdWFsaXR5IGNoZWNrLCByZWFkeS1mb3Itc2hpcG1lbnQgZXZlbnQpIiwNCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LnNlcmlhbF9wYXJ0XzMuMC4wX0RhdGVUaW1lVHJhaXQiDQogICAgICAgICAgfSwNCiAgICAgICAgICAiY291bnRyeSIgOiB7DQogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIkNvdW50cnkgY29kZSB3aGVyZSB0aGUgcGFydCB3YXMgbWFudWZhY3R1cmVkIiwNCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LnNlcmlhbF9wYXJ0XzMuMC4wX1Byb2R1Y3Rpb25Db3VudHJ5Q29kZVRyYWl0Ig0KICAgICAgICAgIH0sDQogICAgICAgICAgInNpdGVzIiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiQSBzaXRlIGlzIGEgZGVsaW1pdGVkIGdlb2dyYXBoaWNhbCBhcmVhIHdoZXJlIGEgbGVnYWwgZW50aXR5IGRvZXMgYnVzaW5lc3MoZ2VvZ3JhcGhpY2FsIGFkZHJlc3Mgd2l0aCBnZW8gY29vcmRpbmF0ZXMpLkEgc2l0ZSBhbHdheXMgaGFzIGEgcHJpbWFyeSBwaHlzaWNhbCBhZGRyZXNzLiBJdCBpcyBwb3NzaWJsZSB0aGF0IGZ1cnRoZXIgcGh5c2ljYWwgYWRkcmVzc2VzIGFyZSBzcGVjaWZpZWQgZm9yIHRoZSBzaXRlLiBQLk8uIGJveCBkZXRhaWxzIGFyZSBvbmx5IHBvc3NpYmxlIGluIGFkZGl0aW9uIHRvIHRoZSBwaHlzaWNhbCBhZGRyZXNzLiBBIHNpdGUgaGFzIGEgMTpuIHJlbGF0aW9uIHRvIGFkZHJlc3NlcywgbWVhbnMgYXQgbGVhc3QgMSBhZGRyZXNzIGlzIG5lY2Vzc2FyeSBhbmQgbXVsdGlwbGUgYWRkcmVzc2VzIGFyZSBwb3NzaWJsZS4iLA0KICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnBhcnRfc2l0ZV9pbmZvcm1hdGlvbl9hc19idWlsdF8yLjAuMF9TaXRlc0NoYXJhY3RlcmlzdGljIg0KICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgInJlcXVpcmVkIiA6IFsgImRhdGUiIF0NCiAgICAgIH0sDQogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5zZXJpYWxfcGFydF8zLjAuMF9QYXJ0SWRDaGFyYWN0ZXJpc3RpYyIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBwYXJ0IElEIGlzIGEgbXVsdGktY2hhcmFjdGVyIHN0cmluZywgdXN1YWxseSBhc3NpZ25lZCBieSBhbiBFUlAgc3lzdGVtIg0KICAgICAgfSwNCiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4LnNlcmlhbF9wYXJ0XzMuMC4wX1BhcnROYW1lQ2hhcmFjdGVyaXN0aWMiIDogew0KICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJQYXJ0IE5hbWUgaW4gc3RyaW5nIGZvcm1hdCBmcm9tIHRoZSByZXNwZWN0aXZlIHN5c3RlbSBpbiB0aGUgdmFsdWUgY2hhaW4iDQogICAgICB9LA0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnBhcnRfY2xhc3NpZmljYXRpb25fMS4wLjBfQ2xhc3NpZmljYXRpb25TdGFuZGFyZENoYXJhY3RlcmlzdGljIiA6IHsNCiAgICAgICAgInR5cGUiIDogInN0cmluZyIsDQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiSWRlbnRpZmllZCBjbGFzc2lmaWNhdGlvbiBzdGFuZGFyZHMgdGhhdCBhbGlnbiB0byB0aGUgQ2F0ZW5hLVggbmVlZHMuIg0KICAgICAgfSwNCiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4LnNoYXJlZC5wYXJ0X2NsYXNzaWZpY2F0aW9uXzEuMC4wX0NsYXNzaWZpY2F0aW9uSURDaGFyYWN0ZXJpc3RpYyIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIkl0IGNhbiBiZSBudW1lcmljIG9yIGEgc3RyaW5nLCBkZXBlbmRpbmcgb24gdGhlIGNob3NlbiBjbGFzc2lmaWNhdGlvbiBzdGFuZGFyZC4iDQogICAgICB9LA0KICAgICAgInVybl9zYW1tX29yZy5lY2xpcHNlLmVzbWYuc2FtbV9jaGFyYWN0ZXJpc3RpY18yLjEuMF9UZXh0IiA6IHsNCiAgICAgICAgInR5cGUiIDogInN0cmluZyIsDQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiRGVzY3JpYmVzIGEgUHJvcGVydHkgd2hpY2ggY29udGFpbnMgcGxhaW4gdGV4dC4gVGhpcyBpcyBpbnRlbmRlZCBleGNsdXNpdmVseSBmb3IgaHVtYW4gcmVhZGFibGUgc3RyaW5ncywgbm90IGZvciBpZGVudGlmaWVycywgbWVhc3VyZW1lbnQgdmFsdWVzLCBldGMuIg0KICAgICAgfSwNCiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4LnNoYXJlZC5wYXJ0X2NsYXNzaWZpY2F0aW9uXzEuMC4wX0NsYXNzaWZpY2F0aW9uRW50aXR5IiA6IHsNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJFbmNhcHN1bGF0ZXMgZGF0YSByZWxhdGVkIHRvIHRoZSBjbGFzc2lmaWNhdGlvbiBvZiB0aGUgcGFydC4iLA0KICAgICAgICAidHlwZSIgOiAib2JqZWN0IiwNCiAgICAgICAgInByb3BlcnRpZXMiIDogew0KICAgICAgICAgICJjbGFzc2lmaWNhdGlvblN0YW5kYXJkIiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiSWRlbnRpZmllZCBjbGFzc2lmaWNhdGlvbiBzdGFuZGFyZHMgdGhhdCBhbGlnbiB0byB0aGUgQ2F0ZW5hLVggbmVlZHMuIiwNCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LnNoYXJlZC5wYXJ0X2NsYXNzaWZpY2F0aW9uXzEuMC4wX0NsYXNzaWZpY2F0aW9uU3RhbmRhcmRDaGFyYWN0ZXJpc3RpYyINCiAgICAgICAgICB9LA0KICAgICAgICAgICJjbGFzc2lmaWNhdGlvbklEIiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGNsYXNzaWZpY2F0aW9uIElEIG9mIHRoZSBwYXJ0IHR5cGUgYWNjb3JkaW5nIHRvIHRoZSBjb3JyZXNwb25kaW5nIHN0YW5kYXJkIGRlZmluaXRpb24gbWVudGlvbmVkIGluIHRoZSBrZXkgdmFsdWUgcGFpci4iLA0KICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnBhcnRfY2xhc3NpZmljYXRpb25fMS4wLjBfQ2xhc3NpZmljYXRpb25JRENoYXJhY3RlcmlzdGljIg0KICAgICAgICAgIH0sDQogICAgICAgICAgImNsYXNzaWZpY2F0aW9uRGVzY3JpcHRpb24iIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJPcHRpb25hbCBwcm9wZXJ0eSBkZXNjcmliaW5nIHRoZSBjbGFzc2lmaWNhdGlvbiBzdGFuZGFyZC4iLA0KICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX29yZy5lY2xpcHNlLmVzbWYuc2FtbV9jaGFyYWN0ZXJpc3RpY18yLjEuMF9UZXh0Ig0KICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgInJlcXVpcmVkIiA6IFsgImNsYXNzaWZpY2F0aW9uU3RhbmRhcmQiLCAiY2xhc3NpZmljYXRpb25JRCIgXQ0KICAgICAgfSwNCiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4LnNoYXJlZC5wYXJ0X2NsYXNzaWZpY2F0aW9uXzEuMC4wX0NsYXNzaWZpY2F0aW9uQ2hhcmFjdGVyaXN0aWMiIDogew0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIkNsYXNzaWZpY2F0aW9uIGNoYXJhY3RlcmlzdGljIGVuYWJsaW5nIGEgc2V0IG9mIGZ1cnRoZXIgcHJvcGVydGllcy4iLA0KICAgICAgICAidHlwZSIgOiAiYXJyYXkiLA0KICAgICAgICAiaXRlbXMiIDogew0KICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LnNoYXJlZC5wYXJ0X2NsYXNzaWZpY2F0aW9uXzEuMC4wX0NsYXNzaWZpY2F0aW9uRW50aXR5Ig0KICAgICAgICB9LA0KICAgICAgICAidW5pcXVlSXRlbXMiIDogdHJ1ZQ0KICAgICAgfSwNCiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4LnNlcmlhbF9wYXJ0XzMuMC4wX1BhcnRUeXBlSW5mb3JtYXRpb25DaGFyYWN0ZXJpc3RpYyIgOiB7DQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGNoYXJhY3RlcmlzdGljcyBvZiB0aGUgcGFydCB0eXBlIiwNCiAgICAgICAgInR5cGUiIDogIm9iamVjdCIsDQogICAgICAgICJwcm9wZXJ0aWVzIiA6IHsNCiAgICAgICAgICAibWFudWZhY3R1cmVyUGFydElkIiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiUGFydCBJRCBhcyBhc3NpZ25lZCBieSB0aGUgbWFudWZhY3R1cmVyIG9mIHRoZSBwYXJ0LiBUaGUgUGFydCBJRCBpZGVudGlmaWVzIHRoZSBwYXJ0IChhcyBkZXNpZ25lZClpbiB0aGUgbWFudWZhY3R1cmVyYHMgZGF0YXNwYWNlLiBUaGUgUGFydCBJRCBkb2VzIG5vdCByZWZlcmVuY2UgYSBzcGVjaWZpYyBpbnN0YW5jZSBvZiBhIHBhcnQgYW5kIHRodXMgc2hvdWxkIG5vdCBiZSBjb25mdXNlZCB3aXRoIHRoZSBzZXJpYWwgbnVtYmVyLiIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5zZXJpYWxfcGFydF8zLjAuMF9QYXJ0SWRDaGFyYWN0ZXJpc3RpYyINCiAgICAgICAgICB9LA0KICAgICAgICAgICJjdXN0b21lclBhcnRJZCIgOiB7DQogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlBhcnQgSUQgYXMgYXNzaWduZWQgYnkgdGhlIG1hbnVmYWN0dXJlciBvZiB0aGUgcGFydC4gVGhlIFBhcnQgSUQgaWRlbnRpZmllcyB0aGUgcGFydCAoYXMgZGVzaWduZWQpaW4gdGhlIGN1c3RvbWVyYHMgZGF0YXNwYWNlLiBUaGUgUGFydCBJRCBkb2VzIG5vdCByZWZlcmVuY2UgYSBzcGVjaWZpYyBpbnN0YW5jZSBvZiBhIHBhcnQgYW5kIHRodXMgc2hvdWxkIG5vdCBiZSBjb25mdXNlZCB3aXRoIHRoZSBzZXJpYWwgbnVtYmVyLiIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5zZXJpYWxfcGFydF8zLjAuMF9QYXJ0SWRDaGFyYWN0ZXJpc3RpYyINCiAgICAgICAgICB9LA0KICAgICAgICAgICJuYW1lQXRNYW51ZmFjdHVyZXIiIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJOYW1lIG9mIHRoZSBwYXJ0IGFzIGFzc2lnbmVkIGJ5IHRoZSBtYW51ZmFjdHVyZXIiLA0KICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2VyaWFsX3BhcnRfMy4wLjBfUGFydE5hbWVDaGFyYWN0ZXJpc3RpYyINCiAgICAgICAgICB9LA0KICAgICAgICAgICJuYW1lQXRDdXN0b21lciIgOiB7DQogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIk5hbWUgb2YgdGhlIHBhcnQgYXMgYXNzaWduZWQgYnkgdGhlIGN1c3RvbWVyIiwNCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LnNlcmlhbF9wYXJ0XzMuMC4wX1BhcnROYW1lQ2hhcmFjdGVyaXN0aWMiDQogICAgICAgICAgfSwNCiAgICAgICAgICAicGFydENsYXNzaWZpY2F0aW9uIiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiUHJvcGVydHkgZGVzY3JpYmluZyB0aGUgY2xhc3NpZmljYXRpb24gb2YgYSBwYXJ0LiIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5zaGFyZWQucGFydF9jbGFzc2lmaWNhdGlvbl8xLjAuMF9DbGFzc2lmaWNhdGlvbkNoYXJhY3RlcmlzdGljIg0KICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgInJlcXVpcmVkIiA6IFsgIm1hbnVmYWN0dXJlclBhcnRJZCIsICJuYW1lQXRNYW51ZmFjdHVyZXIiIF0NCiAgICAgIH0NCiAgICB9DQogIH0sDQogICJwcm9wZXJ0aWVzIiA6IHsNCiAgICAiY2F0ZW5hWElkIiA6IHsNCiAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGZ1bGx5IGFub255bW91cyBDYXRlbmEtWCBJRCBvZiB0aGUgc2VyaWFsaXplZCBwYXJ0LCB2YWxpZCBmb3IgdGhlIENhdGVuYS1YIGRhdGFzcGFjZS4iLA0KICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnV1aWRfMi4wLjBfVXVpZFY0VHJhaXQiDQogICAgfSwNCiAgICAibG9jYWxJZGVudGlmaWVycyIgOiB7DQogICAgICAiZGVzY3JpcHRpb24iIDogIkEgbG9jYWwgaWRlbnRpZmllciBlbmFibGVzIGlkZW50aWZpY2F0aW9uIG9mIGEgcGFydCBpbiBhIHNwZWNpZmljIGRhdGFzcGFjZSwgYnV0IGlzIG5vdCB1bmlxdWUgaW4gQ2F0ZW5hLVggZGF0YXNwYWNlLiBNdWx0aXBsZSBsb2NhbCBpZGVudGlmaWVycyBtYXkgZXhpc3QuIiwNCiAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LnNlcmlhbF9wYXJ0XzMuMC4wX0xvY2FsSWRlbnRpZmllckNoYXJhY3RlcmlzdGljIg0KICAgIH0sDQogICAgIm1hbnVmYWN0dXJpbmdJbmZvcm1hdGlvbiIgOiB7DQogICAgICAiZGVzY3JpcHRpb24iIDogIkluZm9ybWF0aW9uIGZyb20gbWFudWZhY3R1cmluZyBwcm9jZXNzLCBzdWNoIGFzIG1hbnVmYWN0dXJpbmcgZGF0ZSBhbmQgbWFudWZhY3R1cmluZyBjb3VudHJ5IiwNCiAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LnNlcmlhbF9wYXJ0XzMuMC4wX01hbnVmYWN0dXJpbmdDaGFyYWN0ZXJpc3RpYyINCiAgICB9LA0KICAgICJwYXJ0VHlwZUluZm9ybWF0aW9uIiA6IHsNCiAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHBhcnQgdHlwZSBmcm9tIHdoaWNoIHRoZSBzZXJpYWxpemVkIHBhcnQgaGFzIGJlZW4gaW5zdGFudGlhdGVkIiwNCiAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LnNlcmlhbF9wYXJ0XzMuMC4wX1BhcnRUeXBlSW5mb3JtYXRpb25DaGFyYWN0ZXJpc3RpYyINCiAgICB9DQogIH0sDQogICJyZXF1aXJlZCIgOiBbICJjYXRlbmFYSWQiLCAibG9jYWxJZGVudGlmaWVycyIsICJtYW51ZmFjdHVyaW5nSW5mb3JtYXRpb24iLCAicGFydFR5cGVJbmZvcm1hdGlvbiIgXQ0KfQ==
      # urn:samm:io.catenax.shared.part_site_information_as_built:1.0.0#PartSiteInformationAsBuilt
      dXJuOnNhbW06aW8uY2F0ZW5heC5zaGFyZWQucGFydF9zaXRlX2luZm9ybWF0aW9uX2FzX2J1aWx0OjEuMC4wI1BhcnRTaXRlSW5mb3JtYXRpb25Bc0J1aWx0: ew0KICAiJHNjaGVtYSIgOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEiLA0KICAiZGVzY3JpcHRpb24iIDogIlRoZSBhc3BlY3QgcHJvdmlkZXMgc2l0ZSByZWxhdGVkIGluZm9ybWF0aW9uIGZvciBhIGdpdmVuIGl0ZW0oaS5lLiBhIHBhcnQgdHlwZSBvciBwYXJ0IGluc3RhbmNlIHRoYXQgaXMgdW5pcXVlbHkgaWRlbnRpZmlhYmxlIHdpdGhpbiBDYXRlbmEtWCB2aWEgaXRzIENhdGVuYS1YIElEKS4gQSBzaXRlIGlzIGEgZGVsaW1pdGVkIGdlb2dyYXBoaWNhbCBhcmVhIHdoZXJlIGEgbGVnYWwgZW50aXR5IGRvZXMgYnVzaW5lc3MuIEluIHRoaXMgY29udGV4dCBhbGwgcG90ZW50aWFsbHkgcmVsYXRlZCBzaXRlcyBhcmUgbGlzdGVkIGluY2x1ZGluZyBhbGwgc2l0ZXMgd2hlcmUgZS5nLiBwcm9kdWN0aW9uIG9mIHRoaXMgcGFydCh0eXBlKS4iLA0KICAidHlwZSIgOiAib2JqZWN0IiwNCiAgImNvbXBvbmVudHMiIDogew0KICAgICJzY2hlbWFzIiA6IHsNCiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4LnNoYXJlZC5idXNpbmVzc19wYXJ0bmVyX251bWJlcl8xLjAuMF9CcG5zQ2hhcmFjdGVyaXN0aWMiIDogew0KICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJCUE5TIChCdXNpbmVzcyBQYXJ0bmVyIE51bWJlciBTaXRlKSByZXByZXNlbnRzIGEgc2l0ZSB3aGljaCBjYW4gYmUgYSBwcm9kdWN0aW9uIHBsYW50LiBBIHNpdGUgY2FuIGFsc28gYmUgZS5nLiBhbiBvZmZpY2Ugb3IgYSB3YXJlaG91c2UuIEFuIGluZm9ybWF0aW9uIHJlbGF0ZWQgdG8gYSBzaXRlIGlzIGUuZy4gbmVlZGVkIGZvciByZXBvcnRpbmcgaXNzdWVzIChIb3cgbWFueSBzaXRlcyBkb2VzIGUuZy4gQmVpc3BpZWwgQUcgaGF2ZT8pLCBzdGF0dXMgb2Ygb3BlcmF0aW9uIChvdXQgb2Ygb3BlcmF0aW9ucyBkdWUgdG8gZW52aXJvbm1lbnRhbCBkaXNhc3RlciksIGZvciBjZXJ0aWZpY2F0ZXMgb24gc2l0ZSBsZXZlbCAoZS5nLiBlbnZpcm9ubWVudCBjZXJ0aWZpY2F0ZXMpIG9yIGZvciBpbnRlcm5hbCByZWd1bGF0aW9ucyBvbiBzaXRlIGxldmVsLCAoZS5nLiBzZWN1cml0eSB0b3BpY3MsIENvcm9uYSBydWxlcywuLi4pLiBTZXZlcmFsIGFkZHJlc3NlcyAoPSBCUE5BIHdpdGggZGlmZmVyZW50IHN0cmVldHMgYW5kIGRpZmZlcmVudCBnYXRlcykgY2FuIGJlbG9uZyB0byBvbmUgc2l0ZS4gQSBCUE5TIHNob3VsZCBiZSBhbHdheXMgbGlua2VkIHRvIG9uZSBCUE5MIHZpYSByZWxhdGlvbnNoaXAgJ2JlbG9uZ3MgdG8gbGVnYWwgZW50aXR5Jy4iDQogICAgICB9LA0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnBhcnRfc2l0ZV9pbmZvcm1hdGlvbl9hc19idWlsdF8xLjAuMF9GdW5jdGlvbkNoYXJhY3RlcmlzdGljIiA6IHsNCiAgICAgICAgInR5cGUiIDogInN0cmluZyIsDQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiRGVzY3JpYmVzIHRoZSBjaGFyYWN0ZXJpc3RpY3Mgb2YgdGhlIGZ1bmN0aW9uIGZvciBhIHNpdGUgcmVsYXRlZCB0byB0aGUgcmVzcGVjdGl2ZSBwYXJ0LiIsDQogICAgICAgICJlbnVtIiA6IFsgInByb2R1Y3Rpb24iLCAid2FyZWhvdXNlIiwgInNwYXJlIHBhcnQgd2FyZWhvdXNlIiBdDQogICAgICB9LA0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnBhcnRfc2l0ZV9pbmZvcm1hdGlvbl9hc19idWlsdF8xLjAuMF9TaXRlc0VudGl0eSIgOiB7DQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiRGVzY3JpYmVzIHRoZSBJRCBhbmQgZnVuY3Rpb24gb2YgYSBzaXRlIGZvciB0aGUgYXNzb2NpYXRlZCBwYXJ0IGluIHRoZSBBc0J1aWx0IGNvbnRleHQoZS5nLiBTZXJpYWxQYXJ0LCBCYXRjaCwgaklTKS4iLA0KICAgICAgICAidHlwZSIgOiAib2JqZWN0IiwNCiAgICAgICAgInByb3BlcnRpZXMiIDogew0KICAgICAgICAgICJjYXRlbmFYc2l0ZUlkIiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGlkZW50aWZpZXIgb2YgdGhlIHNpdGUgYWNjb3JkaW5nIHRvIENhdGVuYS1YIEJQRE0uIFRoZSBjYXRlbmFYc2l0ZUlkIG11c3QgYmUgYSB2YWxpZCBDYXRlbmEtWCBCUE4uIFRoZSBCUE4gaXMgYSB1bmlxdWUsIHVuY2hhbmdlYWJsZSBpZGVudGlmaWVyIGZvciBCdXNpbmVzcyBQYXJ0bmVycyAvIGNvbXBhbnkgbG9jYXRpb25zIGZyb20gZm91bmRhdGlvbiB0byBjbG9zdXJlLCByZWdhcmRsZXNzIG9mIHRoZSBkaWZmZXJlbnQgYnVzaW5lc3MgcmVsYXRpb25zaGlwcyAvIHN0cnVjdHVyZXMgYmV0d2VlbiBvciB3aXRoaW4gdGhlIEJ1c2luZXNzIFBhcnRuZXJzIG9yIGNvbXBhbnkgbG9jYXRpb25zLiIsDQogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5zaGFyZWQuYnVzaW5lc3NfcGFydG5lcl9udW1iZXJfMS4wLjBfQnBuc0NoYXJhY3RlcmlzdGljIg0KICAgICAgICAgIH0sDQogICAgICAgICAgImZ1bmN0aW9uIiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGZ1bmN0aW9uIG9mIHRoZSBzaXRlIGluIHJlbGF0aW9uIHRvIHRoZSBwYXJ0KGkuZS4gdGhlIGFjdGl2aXR5IHdpdGhpbiB0aGUgdmFsdWUgY2hhaW4gb2YgdGhlIHBhcnQgdGhhdCBpcyBwZXJmb3JtZWQgYXQgdGhlIHNpdGUpIiwNCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9pby5jYXRlbmF4LnNoYXJlZC5wYXJ0X3NpdGVfaW5mb3JtYXRpb25fYXNfYnVpbHRfMS4wLjBfRnVuY3Rpb25DaGFyYWN0ZXJpc3RpYyINCiAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgICJyZXF1aXJlZCIgOiBbICJjYXRlbmFYc2l0ZUlkIiwgImZ1bmN0aW9uIiBdDQogICAgICB9LA0KICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnBhcnRfc2l0ZV9pbmZvcm1hdGlvbl9hc19idWlsdF8xLjAuMF9TaXRlc0NoYXJhY3RlcmlzdGljIiA6IHsNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJTaXRlcyBDaGFyYWN0ZXJpc3RpYyIsDQogICAgICAgICJ0eXBlIiA6ICJhcnJheSIsDQogICAgICAgICJpdGVtcyIgOiB7DQogICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnBhcnRfc2l0ZV9pbmZvcm1hdGlvbl9hc19idWlsdF8xLjAuMF9TaXRlc0VudGl0eSINCiAgICAgICAgfSwNCiAgICAgICAgInVuaXF1ZUl0ZW1zIiA6IHRydWUNCiAgICAgIH0sDQogICAgICAidXJuX3NhbW1faW8uY2F0ZW5heC5zaGFyZWQudXVpZF8xLjAuMF9VdWlkVjRUcmFpdCIgOiB7DQogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBwcm92aWRlZCByZWd1bGFyIGV4cHJlc3Npb24gZW5zdXJlcyB0aGF0IHRoZSBVVUlEIGlzIGNvbXBvc2VkIG9mIGZpdmUgZ3JvdXBzIG9mIGNoYXJhY3RlcnMgc2VwYXJhdGVkIGJ5IGh5cGhlbnMsIGluIHRoZSBmb3JtIDgtNC00LTQtMTIgZm9yIGEgdG90YWwgb2YgMzYgY2hhcmFjdGVycyAoMzIgaGV4YWRlY2ltYWwgY2hhcmFjdGVycyBhbmQgNCBoeXBoZW5zKSwgb3B0aW9uYWxseSBwcmVmaXhlZCBieSBcInVybjp1dWlkOlwiIHRvIG1ha2UgaXQgYW4gSVJJLiIsDQogICAgICAgICJwYXR0ZXJuIiA6ICIoXlswLTlhLWZBLUZdezh9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezEyfSQpfChedXJuOnV1aWQ6WzAtOWEtZkEtRl17OH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17MTJ9JCkiDQogICAgICB9DQogICAgfQ0KICB9LA0KICAicHJvcGVydGllcyIgOiB7DQogICAgInNpdGVzIiA6IHsNCiAgICAgICJkZXNjcmlwdGlvbiIgOiAiQSBzaXRlIGlzIGEgZGVsaW1pdGVkIGdlb2dyYXBoaWNhbCBhcmVhIHdoZXJlIGEgbGVnYWwgZW50aXR5IGRvZXMgYnVzaW5lc3MoZ2VvZ3JhcGhpY2FsIGFkZHJlc3Mgd2l0aCBnZW8gY29vcmRpbmF0ZXMpLkEgc2l0ZSBhbHdheXMgaGFzIGEgcHJpbWFyeSBwaHlzaWNhbCBhZGRyZXNzLiBJdCBpcyBwb3NzaWJsZSB0aGF0IGZ1cnRoZXIgcGh5c2ljYWwgYWRkcmVzc2VzIGFyZSBzcGVjaWZpZWQgZm9yIHRoZSBzaXRlLiBQLk8uIGJveCBkZXRhaWxzIGFyZSBvbmx5IHBvc3NpYmxlIGluIGFkZGl0aW9uIHRvIHRoZSBwaHlzaWNhbCBhZGRyZXNzLiBBIHNpdGUgaGFzIGEgMTpuIHJlbGF0aW9uIHRvIGFkZHJlc3NlcywgbWVhbnMgYXQgbGVhc3QgMSBhZGRyZXNzIGlzIG5lY2Vzc2FyeSBhbmQgbXVsdGlwbGUgYWRkcmVzc2VzIGFyZSBwb3NzaWJsZS4iLA0KICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnBhcnRfc2l0ZV9pbmZvcm1hdGlvbl9hc19idWlsdF8xLjAuMF9TaXRlc0NoYXJhY3RlcmlzdGljIg0KICAgIH0sDQogICAgImNhdGVuYVhJZCIgOiB7DQogICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBDYXRlbmEtWCBJRCBvZiB0aGUgZ2l2ZW4gaXRlbShpLmUuIGEgcGFydCB0eXBlIG9yIHBhcnQgaW5zdGFuY2UpLCB2YWxpZCBmb3IgdGhlIENhdGVuYS1YIGRhdGFzcGFjZS4iLA0KICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXguc2hhcmVkLnV1aWRfMS4wLjBfVXVpZFY0VHJhaXQiDQogICAgfQ0KICB9LA0KICAicmVxdWlyZWQiIDogWyAic2l0ZXMiLCAiY2F0ZW5hWElkIiBdDQp9
      # urn:samm:io.catenax.traction_battery_code:1.0.0#TractionBatteryCode
      dXJuOnNhbW06aW8uY2F0ZW5heC50cmFjdGlvbl9iYXR0ZXJ5X2NvZGU6MS4wLjAjVHJhY3Rpb25CYXR0ZXJ5Q29kZQ: ew0KICAiJHNjaGVtYSIgOiAiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEiLA0KICAiZGVzY3JpcHRpb24iIDogIlRoZSB0cmFjdGlvbiBiYXR0ZXJ5IGNvZGUgaXMgYW4gaWRlbnRpZmljYXRpb24gY29kZSBmb3IgYW55IGF1dG9tb3RpdmUgdHJhY3Rpb24gYmF0dGVyeSwgdWx0cmFjYXBhY2l0b3IgYW5kIG90aGVyIHJlYWNoYXJnZWJsZSBlbmVyZ3kgc3RvcmFnZSBkZXZpY2UuIEl0IGFsbG93cyB0byBjYXJyeSBpbmZvcm1hdGlvbiBhcyByZXF1aXJlZCBieSB0aGUgTmF0aW9uYWwgU3RhbmRhcmQgb2YgdGhlIFBlb3BsZSdzIFJlcHVibGljIG9mIENoaW5hIGFjY29yZGluZyB0byBHQi9UIDM0MDE0LTIwMTcgcHVibGlzaGVkIGJ5IHRoZSBTdGFuZGFyZGl6YXRpb24gQWRtaW5pc3RyYXRpb24gb2YgQ2hpbmEgKFNBQykuIiwNCiAgInR5cGUiIDogIm9iamVjdCIsDQogICJjb21wb25lbnRzIiA6IHsNCiAgICAic2NoZW1hcyIgOiB7DQogICAgICAidXJuX2JhbW1faW8uY2F0ZW5heC50cmFjdGlvbl9iYXR0ZXJ5X2NvZGVfMS4wLjBfVHJhY3Rpb25CYXR0ZXJ5Q29kZVRyYWl0IiA6IHsNCiAgICAgICAgInR5cGUiIDogInN0cmluZyIsDQogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHRyYWN0aW9uIGJhdHRlcnkgY29kZSBhcyByZXF1aXJlZCBieSB0aGUgTmF0aW9uYWwgU3RhbmRhcmQgb2YgdGhlIFBlb3BsZSdzIFJlcHVibGljIG9mIENoaW5hIGFjY29yZGluZyB0byBHQi9UIDM0MDE0LTIwMTcgcHVibGlzaGVkIGJ5IHRoZSBTdGFuZGFyZGl6YXRpb24gQWRtaW5pc3RyYXRpb24gb2YgQ2hpbmEgKFNBQykuIEl0IGNhbiBoYXZlIGEgbGVuZ3RoIG9mIGVpdGhlciAyNCBvciAxOCBjaGFyYWN0ZXJzLiIsDQogICAgICAgICJwYXR0ZXJuIiA6ICIoXltBLVowLTldezN9W1BNQ117MX1bQS1HWl17MX1bQS1aMC05XXsyfVtBLVowLTldezd9WzEtOUEtR0gtTlBSLVldezF9WzEtOUEtQ117MX1bMC05QS1HSC1OUFItWV17MX1bMC05XXs3fSQpfCheW0EtWjAtOV17M31bUE1DXXsxfVtBLUdaXXsxfVtBLVowLTldezJ9WzEtOUEtR0gtTlBSLVldezF9WzEtOUEtQ117MX1bMC05QS1HSC1OUFItWV17MX1bMC05XXs3fVtSXXsxfVtQTUNdezF9JCkiDQogICAgICB9LA0KICAgICAgInVybl9iYW1tX2lvLmNhdGVuYXgudHJhY3Rpb25fYmF0dGVyeV9jb2RlXzEuMC4wX0NvbXBvbmVudFR5cGVDaGFyYWN0ZXJzdGljIiA6IHsNCiAgICAgICAgInR5cGUiIDogInN0cmluZyIsDQogICAgICAgICJlbnVtIiA6IFsgInBhY2siLCAibW9kdWxlIiwgImNlbGwiIF0NCiAgICAgIH0sDQogICAgICAidXJuX2JhbW1faW8uY2F0ZW5heC50cmFjdGlvbl9iYXR0ZXJ5X2NvZGVfMS4wLjBfVHJhY3Rpb25CYXR0ZXJ5Q29tcG9uZW50IiA6IHsNCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJBIGJhdHRlcnkgY29tcG9uZW50IGxpa2UgYSBjZWxsIG9yIGEgbW9kdWxlLiIsDQogICAgICAgICJ0eXBlIiA6ICJvYmplY3QiLA0KICAgICAgICAicHJvcGVydGllcyIgOiB7DQogICAgICAgICAgInRyYWN0aW9uQmF0dGVyeUNvZGUiIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUcmFjdGlvbiBCYXR0ZXJ5IENvZGUgaWRlbnRpZnlpbmcgYSBzaW5nbGUgdHJhY3Rpb24gYmF0dGVyeSBjb21wb25lbnQgbGlrZSBhIHBhY2ssIG1vZHVsZSBvciBjZWxsLiAiLA0KICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLmNhdGVuYXgudHJhY3Rpb25fYmF0dGVyeV9jb2RlXzEuMC4wX1RyYWN0aW9uQmF0dGVyeUNvZGVUcmFpdCINCiAgICAgICAgICB9LA0KICAgICAgICAgICJzdWJjb21wb25lbnRzIiA6IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiU3ViY29tcG9uZW50cyBvZiB0aGUgY29tcG9uZW50LCBpZiBhcHBsaWNhYmxlLiBUaGUgcmVsYXRpb25zaGlwIGJldHdlZW4gdHJhY3Rpb24gYmF0dGVyeSBjb2RlcyBhcmUgYXMgZm9sbG93czpcblxuSWYgdGhpcyB0cmFjdGlvbiBiYXR0ZXJ5IGNvZGUgaXMgZ2l2ZW4gZm9yIGEgY2VsbCBzdWJjb21wb25lbnRzIGFyZSBub3QgcmVxdWlyZWQuIFxuSWYgdGhpcyB0cmFjdGlvbiBiYXR0ZXJ5IGNvZGUgaXMgZ2l2ZW4gZm9yIGEgYmF0dGVyeSBtb2R1bGUgYSBsaXN0IG9mIGNlbGxzIGFyZSByZXF1aXJlZCB0byBiZSByZWdpc3RlcmVkIGFzIHN1YmNvbXBvbmVudHMuXG5JZiB0aGlzIHRyYWN0aW9uIGJhdHRlcnkgY29kZSBpcyBnaXZlbiBmb3IgYSBiYXR0ZXJ5IHBhY2sgYSBsaXN0IG9mIG1vZHVsZXMgYXJlIHJlcXVpcmVkIHRvIGJlIHJlZ2lzdGVyZWQgYXMgc3ViY29tcG9uZW50cyAoY29udGFpbmluZyBlYWNoIGEgbGlzdCBvZiBjZWxsIHN1YmNvbXBvbmVudHMgcmVzcGVjdGl2ZWx5KS4iLA0KICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLmNhdGVuYXgudHJhY3Rpb25fYmF0dGVyeV9jb2RlXzEuMC4wX0NvbXBvbmVudExpc3QiDQogICAgICAgICAgfSwNCiAgICAgICAgICAicHJvZHVjdFR5cGUiIDogew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgdHlwZSBvZiB0aGUgYmF0dGVyeSBjb21wb25lbnQsIGUuZy4gYSBwYWNrLCBhIG1vZHVsZSBvciBhIGNlbGwuIiwNCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fYmFtbV9pby5jYXRlbmF4LnRyYWN0aW9uX2JhdHRlcnlfY29kZV8xLjAuMF9Db21wb25lbnRUeXBlQ2hhcmFjdGVyc3RpYyINCiAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgICJyZXF1aXJlZCIgOiBbICJ0cmFjdGlvbkJhdHRlcnlDb2RlIiwgInByb2R1Y3RUeXBlIiBdDQogICAgICB9LA0KICAgICAgInVybl9iYW1tX2lvLmNhdGVuYXgudHJhY3Rpb25fYmF0dGVyeV9jb2RlXzEuMC4wX0NvbXBvbmVudExpc3QiIDogew0KICAgICAgICAiZGVzY3JpcHRpb24iIDogIkEgbGlzdCBvZiBiYXR0ZXJ5IGNvbXBvbmVudHMgbGlrZSBtb2R1bGVzIG9yIGNlbGxzLiIsDQogICAgICAgICJ0eXBlIiA6ICJhcnJheSIsDQogICAgICAgICJpdGVtcyIgOiB7DQogICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9iYW1tX2lvLmNhdGVuYXgudHJhY3Rpb25fYmF0dGVyeV9jb2RlXzEuMC4wX1RyYWN0aW9uQmF0dGVyeUNvbXBvbmVudCINCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH0NCiAgfSwNCiAgInByb3BlcnRpZXMiIDogew0KICAgICJ0cmFjdGlvbkJhdHRlcnlDb2RlIiA6IHsNCiAgICAgICJkZXNjcmlwdGlvbiIgOiAiVHJhY3Rpb24gQmF0dGVyeSBDb2RlIGlkZW50aWZ5aW5nIGEgc2luZ2xlIHRyYWN0aW9uIGJhdHRlcnkgY29tcG9uZW50IGxpa2UgYSBwYWNrLCBtb2R1bGUgb3IgY2VsbC4gIiwNCiAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fYmFtbV9pby5jYXRlbmF4LnRyYWN0aW9uX2JhdHRlcnlfY29kZV8xLjAuMF9UcmFjdGlvbkJhdHRlcnlDb2RlVHJhaXQiDQogICAgfSwNCiAgICAic3ViY29tcG9uZW50cyIgOiB7DQogICAgICAiZGVzY3JpcHRpb24iIDogIlN1YmNvbXBvbmVudHMgb2YgdGhlIGNvbXBvbmVudCwgaWYgYXBwbGljYWJsZS4gVGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHRyYWN0aW9uIGJhdHRlcnkgY29kZXMgYXJlIGFzIGZvbGxvd3M6XG5cbklmIHRoaXMgdHJhY3Rpb24gYmF0dGVyeSBjb2RlIGlzIGdpdmVuIGZvciBhIGNlbGwgc3ViY29tcG9uZW50cyBhcmUgbm90IHJlcXVpcmVkLiBcbklmIHRoaXMgdHJhY3Rpb24gYmF0dGVyeSBjb2RlIGlzIGdpdmVuIGZvciBhIGJhdHRlcnkgbW9kdWxlIGEgbGlzdCBvZiBjZWxscyBhcmUgcmVxdWlyZWQgdG8gYmUgcmVnaXN0ZXJlZCBhcyBzdWJjb21wb25lbnRzLlxuSWYgdGhpcyB0cmFjdGlvbiBiYXR0ZXJ5IGNvZGUgaXMgZ2l2ZW4gZm9yIGEgYmF0dGVyeSBwYWNrIGEgbGlzdCBvZiBtb2R1bGVzIGFyZSByZXF1aXJlZCB0byBiZSByZWdpc3RlcmVkIGFzIHN1YmNvbXBvbmVudHMgKGNvbnRhaW5pbmcgZWFjaCBhIGxpc3Qgb2YgY2VsbCBzdWJjb21wb25lbnRzIHJlc3BlY3RpdmVseSkuIiwNCiAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fYmFtbV9pby5jYXRlbmF4LnRyYWN0aW9uX2JhdHRlcnlfY29kZV8xLjAuMF9Db21wb25lbnRMaXN0Ig0KICAgIH0sDQogICAgInByb2R1Y3RUeXBlIiA6IHsNCiAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHR5cGUgb2YgdGhlIGJhdHRlcnkgY29tcG9uZW50LCBlLmcuIGEgcGFjaywgYSBtb2R1bGUgb3IgYSBjZWxsLiIsDQogICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX2JhbW1faW8uY2F0ZW5heC50cmFjdGlvbl9iYXR0ZXJ5X2NvZGVfMS4wLjBfQ29tcG9uZW50VHlwZUNoYXJhY3RlcnN0aWMiDQogICAgfQ0KICB9LA0KICAicmVxdWlyZWQiIDogWyAidHJhY3Rpb25CYXR0ZXJ5Q29kZSIsICJwcm9kdWN0VHlwZSIgXQ0KfQ==
      # urn:samm:io.catenax.part_site_information_as_planned:1.0.0#PartSiteInformationAsPlanned
      dXJuOnNhbW06aW8uY2F0ZW5heC5wYXJ0X3NpdGVfaW5mb3JtYXRpb25fYXNfcGxhbm5lZDoxLjAuMCNQYXJ0U2l0ZUluZm9ybWF0aW9uQXNQbGFubmVk: ewogICIkc2NoZW1hIiA6ICJodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA0L3NjaGVtYSIsCiAgImRlc2NyaXB0aW9uIiA6ICJUaGUgYXNwZWN0IHByb3ZpZGVzIHNpdGUgcmVsYXRlZCBpbmZvcm1hdGlvbiBmb3IgYSBnaXZlbiBhcyBwbGFubmVkIGl0ZW0gKGkuZS4gYSBwYXJ0IHR5cGUgb3IgcGFydCBpbnN0YW5jZSB0aGF0IGlzIHVuaXF1ZWx5IGlkZW50aWZpYWJsZSB3aXRoaW4gQ2F0ZW5hLVggdmlhIGl0cyBDYXRlbmEtWCBJRCkuIEEgc2l0ZSBpcyBhIGRlbGltaXRlZCBnZW9ncmFwaGljYWwgYXJlYSB3aGVyZSBhIGxlZ2FsIGVudGl0eSBkb2VzIGJ1c2luZXNzLiBJbiB0aGUgXCJhcyBwbGFubmVkXCIgbGlmZWN5Y2xlIGNvbnRleHQgYWxsIHBvdGVudGlhbGx5IHJlbGF0ZWQgc2l0ZXMgYXJlIGxpc3RlZCBpbmNsdWRpbmcgYWxsIHNpdGVzIHdoZXJlIGUuZy4gcHJvZHVjdGlvbiBvZiB0aGlzIHBhcnQgKHR5cGUpIGlzIHBsYW5uZWQuIiwKICAidHlwZSIgOiAib2JqZWN0IiwKICAiY29tcG9uZW50cyIgOiB7CiAgICAic2NoZW1hcyIgOiB7CiAgICAgICJ1cm5fc2FtbV9pby5jYXRlbmF4LnBhcnRfc2l0ZV9pbmZvcm1hdGlvbl9hc19wbGFubmVkXzEuMC4wX0NhdGVuYVhJZFRyYWl0IiA6IHsKICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBwcm92aWRlZCByZWd1bGFyIGV4cHJlc3Npb24gZW5zdXJlcyB0aGF0IHRoZSBVVUlEIGlzIGNvbXBvc2VkIG9mIGZpdmUgZ3JvdXBzIG9mIGNoYXJhY3RlcnMgc2VwYXJhdGVkIGJ5IGh5cGhlbnMsIGluIHRoZSBmb3JtIDgtNC00LTQtMTIgZm9yIGEgdG90YWwgb2YgMzYgY2hhcmFjdGVycyAoMzIgaGV4YWRlY2ltYWwgY2hhcmFjdGVycyBhbmQgNCBoeXBoZW5zKSwgb3B0aW9uYWxseSBwcmVmaXhlZCBieSBcInVybjp1dWlkOlwiIHRvIG1ha2UgaXQgYW4gSVJJLiIsCiAgICAgICAgInBhdHRlcm4iIDogIiheWzAtOWEtZkEtRl17OH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17MTJ9JCl8KF51cm46dXVpZDpbMC05YS1mQS1GXXs4fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXsxMn0kKSIKICAgICAgfSwKICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXgucGFydF9zaXRlX2luZm9ybWF0aW9uX2FzX3BsYW5uZWRfMS4wLjBfQnBuQ2hhcmFjdGVyaXN0aWMiIDogewogICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiQSBzdHJpbmcgb2YgMTYgY2hhcmFjdGVyczpcblByZWZpeDogMyBkaWdpdHNcdFx0XHRcdFxuQ2xhc3NpZmljYXRpb246IDEgZGlnaXRcbklkZW50aWZpZXI6IDEwIGRpZ2l0cyIKICAgICAgfSwKICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXgucGFydF9zaXRlX2luZm9ybWF0aW9uX2FzX3BsYW5uZWRfMS4wLjBfRnVuY3Rpb25DaGFyYWN0ZXJpc3RpYyIgOiB7CiAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgImVudW0iIDogWyAicHJvZHVjdGlvbiIgXQogICAgICB9LAogICAgICAidXJuX3NhbW1fb3JnLmVjbGlwc2UuZXNtZi5zYW1tX2NoYXJhY3RlcmlzdGljXzIuMS4wX1RpbWVzdGFtcCIgOiB7CiAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgInBhdHRlcm4iIDogIi0/KFsxLTldWzAtOV17Myx9fDBbMC05XXszfSktKDBbMS05XXwxWzAtMl0pLSgwWzEtOV18WzEyXVswLTldfDNbMDFdKVQoKFswMV1bMC05XXwyWzAtM10pOlswLTVdWzAtOV06WzAtNV1bMC05XShcXC5bMC05XSspP3woMjQ6MDA6MDAoXFwuMCspPykpKFp8KFxcK3wtKSgoMFswLTldfDFbMC0zXSk6WzAtNV1bMC05XXwxNDowMCkpPyIsCiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJEZXNjcmliZXMgYSBQcm9wZXJ0eSB3aGljaCBjb250YWlucyB0aGUgZGF0ZSBhbmQgdGltZSB3aXRoIGFuIG9wdGlvbmFsIHRpbWV6b25lLiIKICAgICAgfSwKICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXgucGFydF9zaXRlX2luZm9ybWF0aW9uX2FzX3BsYW5uZWRfMS4wLjBfU2l0ZUVudGl0eSIgOiB7CiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJTaXRlIEVudGl0eSIsCiAgICAgICAgInR5cGUiIDogIm9iamVjdCIsCiAgICAgICAgInByb3BlcnRpZXMiIDogewogICAgICAgICAgImNhdGVuYVhTaXRlSWQiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBpZGVudGlmaWVyIG9mIHRoZSBzaXRlIGFjY29yZGluZyB0byBDYXRlbmEtWCBCUERNLiBUaGUgY2F0ZW5hWFNpdGVJZCBtdXN0IGJlIGEgdmFsaWQgQ2F0ZW5hLVggQlBOLiBUaGUgQlBOIGlzIGEgdW5pcXVlLCB1bmNoYW5nZWFibGUgaWRlbnRpZmllciBmb3IgQnVzaW5lc3MgUGFydG5lcnMgLyBjb21wYW55IGxvY2F0aW9ucyBmcm9tIGZvdW5kYXRpb24gdG8gY2xvc3VyZSwgcmVnYXJkbGVzcyBvZiB0aGUgZGlmZmVyZW50IGJ1c2luZXNzIHJlbGF0aW9uc2hpcHMgLyBzdHJ1Y3R1cmVzIGJldHdlZW4gb3Igd2l0aGluIHRoZSBCdXNpbmVzcyBQYXJ0bmVycyBvciBjb21wYW55IGxvY2F0aW9ucy4iLAogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5wYXJ0X3NpdGVfaW5mb3JtYXRpb25fYXNfcGxhbm5lZF8xLjAuMF9CcG5DaGFyYWN0ZXJpc3RpYyIKICAgICAgICAgIH0sCiAgICAgICAgICAiZnVuY3Rpb24iIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBmdW5jdGlvbiBvZiB0aGUgc2l0ZSBpbiByZWxhdGlvbiB0byB0aGUgcGFydCAoaS5lLiB0aGUgYWN0aXZpdHkgd2l0aGluIHRoZSB2YWx1ZSBjaGFpbiBvZiB0aGUgcGFydCB0aGF0IGlzIHBlcmZvcm1lZCBhdCB0aGUgc2l0ZSkiLAogICAgICAgICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5wYXJ0X3NpdGVfaW5mb3JtYXRpb25fYXNfcGxhbm5lZF8xLjAuMF9GdW5jdGlvbkNoYXJhY3RlcmlzdGljIgogICAgICAgICAgfSwKICAgICAgICAgICJmdW5jdGlvblZhbGlkRnJvbSIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGltZXN0YW1wLCBmcm9tIHdoZW4gdGhlIHNpdGUgaGFzIHRoZSBzcGVjaWZpZWQgZnVuY3Rpb24gZm9yIHRoZSBnaXZlbiBwYXJ0IiwKICAgICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX29yZy5lY2xpcHNlLmVzbWYuc2FtbV9jaGFyYWN0ZXJpc3RpY18yLjEuMF9UaW1lc3RhbXAiCiAgICAgICAgICB9LAogICAgICAgICAgImZ1bmN0aW9uVmFsaWRVbnRpbCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGltZXN0YW1wLCB1bnRpbCB3aGVuIHRoZSBzaXRlIGhhcyB0aGUgc3BlY2lmaWVkIGZ1bmN0aW9uIGZvciB0aGUgZ2l2ZW4gcGFydCIsCiAgICAgICAgICAgICIkcmVmIiA6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy91cm5fc2FtbV9vcmcuZWNsaXBzZS5lc21mLnNhbW1fY2hhcmFjdGVyaXN0aWNfMi4xLjBfVGltZXN0YW1wIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgInJlcXVpcmVkIiA6IFsgImNhdGVuYVhTaXRlSWQiLCAiZnVuY3Rpb24iIF0KICAgICAgfSwKICAgICAgInVybl9zYW1tX2lvLmNhdGVuYXgucGFydF9zaXRlX2luZm9ybWF0aW9uX2FzX3BsYW5uZWRfMS4wLjBfU2l0ZXNDaGFyYWN0ZXJpc3RpYyIgOiB7CiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJTaXRlcyBDaGFyYWN0ZXJpc3RpYyIsCiAgICAgICAgInR5cGUiIDogImFycmF5IiwKICAgICAgICAiaXRlbXMiIDogewogICAgICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXgucGFydF9zaXRlX2luZm9ybWF0aW9uX2FzX3BsYW5uZWRfMS4wLjBfU2l0ZUVudGl0eSIKICAgICAgICB9LAogICAgICAgICJ1bmlxdWVJdGVtcyIgOiB0cnVlCiAgICAgIH0KICAgIH0KICB9LAogICJwcm9wZXJ0aWVzIiA6IHsKICAgICJjYXRlbmFYSWQiIDogewogICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBDYXRlbmEtWCBJRCBvZiB0aGUgZ2l2ZW4gaXRlbSAoaS5lLiBhIHBhcnQgdHlwZSBvciBwYXJ0IGluc3RhbmNlKSwgdmFsaWQgZm9yIHRoZSBDYXRlbmEtWCBkYXRhc3BhY2UuIiwKICAgICAgIiRyZWYiIDogIiMvY29tcG9uZW50cy9zY2hlbWFzL3Vybl9zYW1tX2lvLmNhdGVuYXgucGFydF9zaXRlX2luZm9ybWF0aW9uX2FzX3BsYW5uZWRfMS4wLjBfQ2F0ZW5hWElkVHJhaXQiCiAgICB9LAogICAgInNpdGVzIiA6IHsKICAgICAgImRlc2NyaXB0aW9uIiA6ICJBIHNpdGUgaXMgYSBkZWxpbWl0ZWQgZ2VvZ3JhcGhpY2FsIGFyZWEgd2hlcmUgYSBsZWdhbCBlbnRpdHkgZG9lcyBidXNpbmVzcyAoZ2VvZ3JhcGhpY2FsIGFkZHJlc3Mgd2l0aCBnZW8gY29vcmRpbmF0ZXMpLkEgc2l0ZSBhbHdheXMgaGFzIGEgcHJpbWFyeSBwaHlzaWNhbCBhZGRyZXNzLiBJdCBpcyBwb3NzaWJsZSB0aGF0IGZ1cnRoZXIgcGh5c2ljYWwgYWRkcmVzc2VzIGFyZSBzcGVjaWZpZWQgZm9yIHRoZSBzaXRlLiBQLk8uIGJveCBkZXRhaWxzIGFyZSBvbmx5IHBvc3NpYmxlIGluIGFkZGl0aW9uIHRvIHRoZSBwaHlzaWNhbCBhZGRyZXNzLiBBIHNpdGUgaGFzIGEgMTpuIHJlbGF0aW9uIHRvIGFkZHJlc3NlcywgbWVhbnMgYXQgbGVhc3QgMSBhZGRyZXNzIGlzIG5lY2Vzc2FyeSBhbmQgbXVsdGlwbGUgYWRkcmVzc2VzIGFyZSBwb3NzaWJsZS4iLAogICAgICAiJHJlZiIgOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvdXJuX3NhbW1faW8uY2F0ZW5heC5wYXJ0X3NpdGVfaW5mb3JtYXRpb25fYXNfcGxhbm5lZF8xLjAuMF9TaXRlc0NoYXJhY3RlcmlzdGljIgogICAgfQogIH0sCiAgInJlcXVpcmVkIiA6IFsgImNhdGVuYVhJZCIsICJzaXRlcyIgXQp9

  bpdm:
    url: *partners_pool_url

  blobstore:
    persistence:
      storeType: MINIO
      minio:
        endpoint: *irs_database_url
        accessKey: *irs_database_username
        secretKey: *irs_database_password
    jobs:
      containerName: irsbucket
      daysToLive: 7
    policies:
      containerName: irs-policy-bucket
      daysToLive: -1

  oauth2:
    semantics:
      clientId: *service_account_id
      clientSecret: *service_account_password
    discovery:
      clientId: *service_account_id
      clientSecret: *service_account_password
    bpdm:
      clientId: *service_account_id
      clientSecret: *service_account_password
    clientTokenUri: *central_idp_token_uri

  edc:
    orchestration:
      threadPoolSize: 5
    negotiationCallbackurl: *irsNegotiationCallbackurl
    callbackurl: *irsCallbackurl
    controlplane:
      edrManagementEnabled: true
      endpoint:
        data: *edc_controlplane_management_url
        catalog: /v3/catalog/request
        edrManagement: /v2/edrs
        contractnegotiation: /v3/contractnegotiations
        transferprocess: /v3/transferprocesses
        contractAgreements: /v3/contractagreements
      apikey:
        secret: *edc_api_key

  minio:
    nameOverride: *irs_database_name
    fullnameOverride: *irs_database_name
    rootUser: *irs_database_username
    rootPassword: *irs_database_password


###################################
# EDC Consumer configuration  #
###################################
tractusx-connector:
  nameOverride: *edc_name
  fullnameOverride: *edc_name
  participant:
    id: *bpn
  iatp:
    # Decentralized IDentifier
    id: <path:traceability-foss/data/int-b/iatp#DID>
    sts:
      dim:
        url: <path:traceability-foss/data/int-b/iatp#dimUrl>
      oauth:
        token_url: <path:traceability-foss/data/int-b/iatp#iatp.oauth.tokenurl>
        client:
          id: <path:traceability-foss/data/int-b/iatp#dimClientId>
          secret_alias: edc-miw-keycloak-secret-int-b-provider
  controlplane:
    policy:
      validation:
        enabled: false
    ingresses:
      - enabled: true
        hostname: *edc_controlplane_hostname
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-prod"
          nginx.ingress.kubernetes.io/ssl-passthrough: "false"
          nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        endpoints:
          - protocol
          - management
        tls:
          enabled: true
          secretName: tls-secret-tx-edc-controlplane-int-b
    bdrs:
      # time that a cached BPN/DID resolution map is valid in seconds, default is 10 min
      cache_validity_seconds: 600
      server:
        # URL of the BPN/DID Resolution Service - required:
        url: <path:traceability-foss/data/int-b/iatp#bdrsUrl>
    env:
      # workaround till 0.7.1 chart
      EDC_IAM_TRUSTED-ISSUER_ISSUER1_ID: <path:traceability-foss/data/int-b/iatp#trustedIssuer>
    endpoints:
      management:
        authKey: *edc_api_key

    resources:
      limits:
        cpu: 400m
        memory: 1.5Gi
      requests:
        cpu: 15m
        memory: 1.5Gi

    # workaround for 0.10.0-rc2
    catalog:
      cache:
        execution:
          enabled: false
    dcp:
      v08:
        forced: true


  dataplane:
    token:
      signer:
        privatekey_alias: daps-cert-edc-int-b-consumer-private
      verifier:
        publickey_alias: daps-cert-edc-int-b-consumer-public
    ingresses:
      - enabled: true
        hostname: *edc_dataplane_hostname
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-prod"
          nginx.ingress.kubernetes.io/ssl-passthrough: "false"
          nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        endpoints:
          - public
        className: "nginx"
        tls:
          enabled: true
          secretName: tls-secret-tx-edc-dataplane-int-b
    resources:
      limits:
        cpu: 200m
        memory: 512Mi
      requests:
        cpu: 15m
        memory: 512Mi

  ## currently we need to provide a url but is not used anywhere
  # URL where the EndpointDataReference callback will be sent to
  backendService:
    httpProxyTokenReceiverUrl: *backend_edc_client_callback_url

  ################################
  # EDC Vault Configuration #
  ################################
  vault:
    hashicorp:
      url: *vault_url
      token: *vault_token
    paths:
      secret: /v1/traceability-foss
      health: /v1/sys/health
    secretNames:
      transferProxyTokenSignerPrivateKey: *edc_private_key
      transferProxyTokenSignerPublicKey: *edc_public_key
      transferProxyTokenEncryptionAesKey: *edc_encryption_key

  ##################################
  # EDC Postgres Configuration #
  ##################################
  postgresql:
    auth:
      username: *edc_database_username
      password: *edc_database_password
    username: *edc_database_username
    password: *edc_database_password
    jdbcUrl: *edc_database_jdbc_url

###################################
# EDC Postgres Configuration #
###################################
edc-postgresql:
  nameOverride: *edc_database_name
  fullnameOverride: *edc_database_name
  auth:
    username: *edc_database_username
    postgresPassword: *edc_database_password
    password: *edc_database_password
