################################################################################
# Copyright (c) 2022, 2023 Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
# Copyright (c) 2022, 2023 ZF Friedrichshafen AG
# Copyright (c) 2022, 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
################################################################################
traceability:
  bpn: ${TRACEABILITY_BPN}
  url: ${TRACEABILITY_URL}
  internalUrl: ${TRACEABILITY_URL_INTERNAL}
  leftOperand: ${TRACEABILITY_LEFT_OPERAND}
  operatorType: ${TRACEABILITY_OPERATOR_TYPE}
  rightOperand: ${TRACEABILITY_RIGHT_OPERAND}
  leftOperandSecond: ${TRACEABILITY_LEFT_OPERAND_SECOND}
  operatorTypeSecond: ${TRACEABILITY_OPERATOR_TYPE_SECOND}
  rightOperandSecond: ${TRACEABILITY_RIGHT_OPERAND_SECOND}
  validUntil: ${TRACEABILITY_VALID_UNTIL}
  irsAdminApiKey: ${IRS_ADMIN_API_KEY}
  regularApiKey: ${IRS_REGULAR_API_KEY}
  irsBase: ${IRS_URL}
  irsPoliciesPath: "/irs/policies"
  register-decentral-registry-permissions: ${TRACEABILITY_REGISTER_DECENTRAL_REGISTRY_PERMISSIONS}
  discoveryType: ${DISCOVERY_TYPE}
  technicalServiceApiKey: ${TECHNICAL_SERVICE_API_KEY}
  assetRefreshJobCronExpression: ${TRACEABILITY_ASSETS_REFRESH_CRON:0 0 */2 * * ?}
  assetRefreshJobZone: ${TRACEABILITY_ASSETS_REFRESH_ZONE:Europe/Berlin}
  publishAssetCronExpression: ${TRACEABILITY_PUBLISH_ASSET_CRON:0 30 */1 * * ?}
  publishAssetCronZone: ${TRACEABILITY_PUBLISH_ASSET_ZONE:Europe/Berlin}
  enableApiKeyAuthentication: ${TRACEABILITY_ENABLE_API_KEY_AUTHENTICATION:false}
  tracexAdminKey: ${TRACEABILITY_ADMIN_KEY}

provisioning:
  submodel:
    baseInternal: ${SUBMODEL_URL_INTERNAL}
    baseExternal: ${SUBMODEL_URL_EXTERNAL}
    path: ${SUBMODEL_PATH}
    clientId:  ${SUBMODEL_CLIENT_ID}
    clientSecret: ${SUBMODEL_CLIENT_SECRET}
    tokenUrl:  ${SUBMODEL_TOKEN_URL}
    oauthProviderRegistrationId:  ${SUBMODEL_OAUTH_PROVIDER_REGISTRATION_ID}
    useCustomImplementation: ${SUBMODEL_CUSTOM_IMPLEMENTATION_ENABLED:true}
  registry:
    urlWithPathInternal: ${REGISTRY_URL_WITH_PATH_INTERNAL:https://registry.net/semantics/registry/api/v3.0}
    urlWithPathExternal: ${REGISTRY_URL_WITH_PATH_EXTERNAL:https://registry.net/semantics/registry/api/v3.0}
    shellDescriptorUrl: /shell-descriptors
    oauthEnabled: ${REGISTRY_OAUTH_ENABLED:false}
    clientId: ${REGISTRY_CLIENT_ID}
    clientSecret: ${REGISTRY_CLIENT_SECRET}
    tokenUrl: ${REGISTRY_TOKEN_URL}
    oauthProviderRegistrationId: ${REGISTRY_OAUTH_PROVIDER_REGISTRATION_ID}
    allowedBpns: ${REGISTRY_ALLOWED_BPNS:BPNL00000003CML1,BPNL00000003CNKC}
    edcAssetId: ${REGISTRY_EDC_ASSET_ID:registry-asset}

edc:
  ids:
    path: "/api/v1/dsp"
  api-auth-key: ${EDC_PROVIDER_API_KEY}
  provider-edc-url: ${EDC_PROVIDER_URL}
  provider-dataplane-edc-url: ${EDC_PROVIDER_DATAPLANE_URL}

irs-edc-client:
  callback:
    mapping: /internal/endpoint-data-reference
    negotiation-mapping: /internal/negotiation-callback
  callback-url: ${EDC_CALLBACK_URL_EDC_CLIENT}
  controlplane:
    request-ttl: PT10M # How long to wait for an async EDC negotiation request to finish, ISO 8601 Duration
    endpoint:
      data: ${EDC_DATA_ENDPOINT_URL}
      asset: /management/v3/assets
      contract-definition: /management/v2/contractdefinitions
      policy-definition: /management/v2/policydefinitions
      catalog: /v2/catalog/request # EDC consumer controlplane catalog path
      contract-negotiation: /v2/contractnegotiations # EDC consumer controlplane contract negotiation path
      transfer-process: /v2/transferprocesses # EDC consumer controlplane transfer process path
      state-suffix: /state # Path of the state suffix for contract negotiation and transfer process
      contract-agreements: /v2/contractagreements # EDC consumer controlplane contract agreements path
    provider-suffix: /api/v1/dsp # Suffix to add to data requests to the EDC provider controlplane
    catalog-limit: 1000 # Max number of items to fetch from the EDC provider catalog
    catalog-page-size: 50 # Number of items to fetch at one page from the EDC provider catalog when using pagination
    api-key:
      header: "X-Api-Key" # API header key to use in communication with the EDC consumer controlplane
      secret: ${EDC_API_KEY} # API header secret to use in communication with the EDC consumer controlplane
    datareference:
      storage:
        duration: PT1H # Time after which stored data references will be cleaned up, ISO 8601 Duration

  submodel:
    request-ttl: PT10M # How long to wait for an async EDC submodel retrieval to finish, ISO 8601 Duration
    urn-prefix: /urn # A prefix used to identify URNs correctly in the submodel endpoint address
    timeout:
      read: PT90S # HTTP read timeout for the submodel client
      connect: PT90S # HTTP connect timeout for the submodel client
  discoveryFinderClient:
    cacheTTL: PT24H  # Time to live for DiscoveryFinderClient for findDiscoveryEndpoints method cache
  connectorEndpointService:
    cacheTTL: PT24H  # Time to live for ConnectorEndpointService for fetchConnectorEndpoints method cache


server:
  trustedPort: ${TRUSTED_PORT}
  servlet:
    context-path: /api

management:
  endpoint:
    health:
      probes:
        enabled: true
  health:
    readinessState:
      enabled: true
    livenessState:
      enabled: true
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: health, threaddump, loggers, prometheus, info, metrics
  server:
    port: 8081

logging:
  level:
    org:
      springframework:
        security: DEBUG
spring:
  jpa:
    show-sql: false
    properties:
      hibernate:
        format_sql: true
  main:
    allow-bean-definition-overriding: true
  flyway:
    enabled: true
    placeholders:
      applicationBpn: ${TRACEABILITY_BPN}
      bpnB: ${TRACEABILITY_BPN_B}
      bpnA: ${TRACEABILITY_BPN_A}
  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
  security:
    oauth2:
      client:
        registration:
          keycloak:
            authorization-grant-type: client_credentials
            client-id: ${OAUTH2_CLIENT_ID}
            client-secret: ${OAUTH2_CLIENT_SECRET}
            scope: ${OAUTH2_CLIENT_SCOPE:openid}
          OKTA:
            client-id: ${OAUTH2_CLIENT_ID}
            client-secret: ${OAUTH2_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            scope: ${OAUTH2_CLIENT_SCOPE:openid}
          # Second Identity Provider (for DTR and Submodel services)
          dtr:
            client-id: ${REGISTRY_CLIENT_ID}
            client-secret: ${REGISTRY_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            scope: ${REGISTRY_CLIENT_SCOPE:openid}
          submodel:
            client-id: ${SUBMODEL_CLIENT_ID}
            client-secret: ${SUBMODEL_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            scope: ${SUBMODEL_CLIENT_SCOPE:openid}
          bpdm:
            authorization-grant-type: client_credentials
            client-id: ${BPDM_CLIENT_ID}
            client-secret: ${BPDM_CLIENT_SECRET}
            scope: ${OAUTH2_CLIENT_SCOPE:openid}
        provider:
          keycloak:
            token-uri: ${OAUTH2_PROVIDER_TOKEN_URI}
          OKTA:
            token-uri: ${OAUTH2_PROVIDER_TOKEN_URI}
          dtr:
            token-uri: ${REGISTRY_TOKEN_URL}
          submodel:
            token-uri: ${SUBMODEL_TOKEN_URL}
          bpdm:
            token-uri: ${BPDM_TOKEN_URL}
      resourceserver:
        jwt:
          jwk-set-uri: ${OAUTH2_JWK_SET_URI:https://default}

jwt:
  resource-client: ${JWT_RESOURCE_CLIENT}
feign:
  default:
    connectionTimeoutMillis: 200
    readTimeoutMillis: 5000
    maxIdleConnections: 10
    keepAliveDurationMinutes: 5

cache:
  bpn:
    name: "bpn-mappings"
    maximumSize: 500
    expireAfterWrite: 1d

cors:
  origins: >
    ${ALLOWED_CORS_ORIGIN_FIRST},
    ${ALLOWED_CORS_ORIGIN_SECOND}

digitalTwinRegistryClient:
  shellDescriptorTemplate: /shell-descriptors/{aasIdentifier} # The path to retrieve AAS descriptors from the decentral DTR, must contain the placeholder {aasIdentifier}
  lookupShellsTemplate: /lookup/shells?assetIds={assetIds} # The path to lookup shells from the decentral DTR, must contain the placeholder {assetIds}
  oAuthClientId: keycloak
  type: "decentral"
  discoveryFinderUrl: ${DISCOVERY_FINDER_URL_WITH_PATH}
  descriptorEndpoint: "" # required if type is "central", must contain the placeholder {aasIdentifier}
  shellLookupEndpoint: "" # required if type is "central", must contain the placeholder {assetIds}
  discovery:
    type: ${DISCOVERY_TYPE}

bpdm:
  providerUrl: ${BPDM_URL} # Endpoint to resolve BPNs, must contain the placeholders {partnerId} and {idType}
  providerBpnl: ${BPDM_PROVIDER_BPNL}
